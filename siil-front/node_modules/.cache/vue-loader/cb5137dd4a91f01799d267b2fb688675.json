{"remainingRequest":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\src\\components\\FormularioPerfil.vue?vue&type=template&id=b98b30e4&","dependencies":[{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\src\\components\\FormularioPerfil.vue","mtime":1613417516623},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610378888681},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610378888681},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiICA+CiAgICA8aDQgIHYtc2hvdz0iYXJyYXlBc3BpcmFudGUuZm9ybXVsYXJpb19wZXJmaWw9PT0nU2knIiBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7IGZvbnQtc2l6ZToyMHB4OyI+WWEgaGFzIGNvbXBsZXRhZG8gZXN0ZSBmb3JtdWxhcmlvLAogICAgICAgcGVybyBwdWVkZXMgc2VndWlyIGFjdHVhbGl6YXIgdHUgaW5mb3JtYWNpb24uIFkgZGUgcXVlIHNlcnZpcmEgYWN0dWFsaXphciB0dSBpbmZvcm1hY2lvbj8gCiAgICAgICBQdWVzIHNpIGNhZGEgdmV6IHZhcyBhdW1lbnRhbmRvIHR1cyBjb25vY2ltaWVudG9zIHBvZHJhcyBzZXIgcmVjb21lbmRhZG8geSBhY2VwdGFkbyBjb24gbXVjaGEgbWFzIGZhY2lsaWRhZCBwb3IgdHVzIGNvbXBldGVuY2lhcyBhZHF1aXJpZGFzPC9oND4gIAogICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgPGRpdiBjbGFzcz0ibWQtbGF5b3V0LWl0ZW0gbWQtbWVkaXVtLXNpemUtMTAwIG1kLXhzbWFsbC1zaXhlLTEwMCBtZC1zaXplLTEwMCI+CiAgICAgIDx2LW92ZXJsYXkgOnZhbHVlPSJsb2FkZXIiIDp6LWluZGV4PSInOTk5OTk5OTknIj4KICAgICAgICA8di1wcm9ncmVzcy1jaXJjdWxhciBpbmRldGVybWluYXRlIHNpemU9IjgwIiBjb2xvcj0iIzgxNDY5MCI+PC92LXByb2dyZXNzLWNpcmN1bGFyPgogICAgICA8L3Ytb3ZlcmxheT4KICAgICAgPHYtY2FyZCB2LXNob3c9ImFycmF5QXNwaXJhbnRlLmZvcm11bGFyaW9fcGVyZmlsPT09J1NpJyI+CiAgICAgICAgPHYtY2FyZC10aXRsZT4KICAgICAgICAgIERhdG9zIEdlbmVyYWxlcwogICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgIDx2LWRhdGEtdGFibGUKICAgICAgICAgIDpoZWFkZXJzPSJFbmNhYmV6YWRvIgogICAgICAgICAgOml0ZW1zPSJhcnJheUZvcm11bGFyaW8iCiAgICAgICAgICBjbGFzcz0iZWxldmF0aW9uLTEiCiAgICAgICAgICBtdWx0aS1zb3J0CiAgICAgICAgICBoaWRlLWRlZmF1bHQtZm9vdGVyCiAgICAgICAgPgogICAgICAgICAgPCEtLSBUZW1wbGVhdGUgcGFyYSBmb3JtIG1vZGFsIHBhcmEgYWdyZWdhciBvIGFjdHVhbGl6YXIgcHJvZHVjdG9zLS0+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRvcD4KICAgICAgICAgICAgPHYtdG9vbGJhciBmbGF0IGNvbG9yPSJ3aGl0ZSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1ncm93LTEiPjwvZGl2PgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJtb2RhbEZvcm0iIHBlcnNpc3RlbnQgbWF4LXdpZHRoPSIxMDAwcHgiPgogICAgICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0iaGVhZGxpbmUgd2hpdGUiIHByaW1hcnktdGl0bGVzPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoZWFkbGluZSI+QWN0dWFsaXphY2lvbiBkZSBEYXRvcyBkZWwgRWdyZXNhZG88L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyPgogICAgICAgICAgICAgICAgICAgICAgPHYtZm9ybSByZWY9ImZvcm1QZXJmaWwiIHYtbW9kZWw9InZhbGlkIiA6bGF6eS12YWxpZGF0aW9uPSJ0cnVlIj4KICAgICAgICAgICAgICA8di1jb250YWluZXI+CiAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjIzIwMjAyZiI+SS5EYXRvcyBQZXJzb25hbGVzPC90aGVhZD4KICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8IS0tdi1yb3cgcGFydGUgMS0tPiAKICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjAiIG1kPSIwIiA+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICB2LXNob3c9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWQiCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmlkIgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPCEtLWVzdGFkbyBjaXZpbC0tPgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmVzdGFkb19jaXZpbCIKICAgICAgICAgICAgICAgICAgICA6aXRlbXM9ImVzdGFkb3MiCiAgICAgICAgICAgICAgICAgICAgaXRlbS10ZXh0PSIiCiAgICAgICAgICAgICAgICAgICAgaXRlbS12YWx1ZT0iIgogICAgICAgICAgICAgICAgICAgIGxhYmVsPSJFc3RhZG8gQ2l2aWwiCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPCEtLU51bWVybyBkZSB0ZWxlZm9uby0tPgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMyIgc3R5bGU9IiBkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD0iYXJyYXlBbHVtbm8uY2VsdWxhciIKICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVsIG7Dum1lcm8gcXVlIHB1ZWRlcyB2ZXIgYSBsYSBpenF1aWVyZGEgZXMgdHUgbsO6bWVybyBkZQogICAgICAgICAgICAgICAgICAgICAgICAgICB0ZWxlZm9ubyBxdWUgdGVuZW1vcyBwYXJhIGNvbnRhY3RhcnRlLCBzaSBoYXMgY2FtYmlhZG8gZGUgbsO6bWVybyB0ZWxlZm9uaWNvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9yIGZhdm9yIGluZ3Jlc2EgdHUgbnVldm8gbsO6bWVybyBlbiBlbCByZWN1YWRybyBkZSA8c3Ryb25nPk51ZXZvIG7Dum1lcm88L3N0cm9uZz4gKHNpIG5vIGhhcyBjYW1iaWFkbyBkZWJlcyBkZWphcmxvIGVuIGJsYW5jbykuIEdyYWNpYXMhISE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5jZWx1bGFyMiIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uY2VsdWxhcjIiCiAgICAgICAgICAgICAgICAgICAgICA6cnVsZXM9InBob25lUnVsZXMiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iTnVldm8gbsO6bWVybyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwhLS1QYXNhcG9ydGUtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiIgc3R5bGU9IiBkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5wYXNhcG9ydGUiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLnBhc2Fwb3J0ZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQYXNhcG9ydGUiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaSB0aWVuZXMgPHN0cm9uZz5QYXNhcG9ydGU8L3N0cm9uZz4gZGViZXMgZXNjcmliaXIgZWwgbsO6bWVybyBkZSByZWZlcmVuY2lhPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5saWNlbmNpYV9jb25kdWNpciIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubGljZW5jaWFfY29uZHVjaXIiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iTGljZW5jaWEgZGUgY29uZHVjaXIiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaSB0aWVuZXMgPHN0cm9uZz5MaWNlbmNpYSBkZSBjb25kdWNpcjwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgPCEtLU5VUC0tPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIiBzdHlsZT0iIGRpc3BsYXk6ZmxleDsiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm51cCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubnVwIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik51cCIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoyMHB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+wr9RdcOpIGVzIGVsIE5VUD8gRXMgZWwgTsO6bWVybyDDmm5pY28gUHJldmlzaW9uYWwgcXVlIGlkZW50aWZpY2EgYSBjYWRhIGFmaWxpYWRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgZXMgYXNpZ25hZG8gcG9yIGxhIFN1cGVyaW50ZW5kZW5jaWEgZGVsIFNpc3RlbWEgRmluYW5jaWVyby4gUHVlZGUgZW5jb250cmFyc2UgCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGbDoWNpbG1lbnRlIGVuIHR1IENhcm7DqSBkZSBhZmlsaWFkbyBhIENPTkZJQSB5IGF1bnF1ZSB0ZSB0cmFzbGFkZXMgYSBvdHJhIEFGUCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR1IE5VUCBzZWd1aXLDoSBzaWVuZG8gZWwgbWlzbW88L3NwYW4+IAogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4uIFNpIHRpZW5lcyA8c3Ryb25nPk7Dum1lcm8gw7puaWNvIHByZXZpc2lvbmFsPC9zdHJvbmc+IGRlYmVzIGVzY3JpYmlyIGVsIG7Dum1lcm8gZGUgcmVmZXJlbmNpYTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIDwhLS1uaXZlbCBkZSBJZGlvbWEtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXgiIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm5pdmVsX2lkaW9tYSIKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm5pdmVsX2lkaW9tYSIKICAgICAgICAgICAgICAgICAgICA6aXRlbXM9Iml0ZW1zIgogICAgICAgICAgICAgICAgICAgIGxhYmVsPSJOaXZlbCBkZSBzZWd1bmRvIGlkaW9tYSIKICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjIzIwMjAyZiI+SUkuRXN0YWRvIERlIFNhbHVkPC90aGVhZD4KICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDwhLS12LXJvdyBwYXJ0ZSAyLS0+CiAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8IS0tRW5mZXJtZW1kYWQgQ3JvbmljYS0tPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5lbmZlcm1hZGFkX21lbmNpb24iCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmVuZmVybWFkYWRfbWVuY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0ieWVzbm8iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iUGFkZWNlIGFsZ3VuYSBFbmZlcm1lZGFkIENyb25pY2E/IgogICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L3YtY29sPiAKICAgICAgICAgICAgICAgICAgIDwhLS1zaT9FbmZlcm1lbWRhZCBDcm9uaWNhLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjYiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX2Nyb25pY2EiCiAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5lbmZlcm1hZGFkX21lbmNpb249PT0nTm8nIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX2Nyb25pY2EiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU2k/IE1lbmNpb25hciIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIDwhLS1NZWRpY2FtZW50b3MtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm1lZGljYW1lbnRvX3Blcm1hIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19wZXJtYSIKICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJ5ZXNubyIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJOZWNlc2l0YSBtZWRpY2FtZW50b3MgcGVybWFuZW50ZXM/IgogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICA8IS0tU2k/TWVkaWNhbWVudG9zLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjYiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19tZW5jaW9uIgogICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19wZXJtYT09PSdObyciCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm1lZGljYW1lbnRvX21lbmNpb24iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU2k/IE1lbmNpb25hciIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIDwhLS1EaXNjYXBhY2lkYWQtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5kaXNjYXBhY2lkYWQiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmRpc2NhcGFjaWRhZCIKICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0ieWVzbm8iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iUG9zZWUgYWxnw7puIHRpcG8gZGUgZGlzY2FwYWNpZGFkPyIKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjIzIwMjAyZiI+SUlJLkluZm9ybWFjaW9uIEFjYWTDqW1pY2E8L3RoZWFkPgogICAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgPCEtLXYtcm93IHBhcnRlIDMtLT4KICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgPCEtLW5pdmVsIGFjYWRlbWljby0tPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPCEtLUN1cnNvcy0tPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiIgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uY3Vyc29zX2luZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uY3Vyc29zX2luZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YUN1cnNvIgogICAgICAgICAgICAgICAgICAgIGxhYmVsPSJDdXJzb3MgZGUgZm9ybWFjaW9uIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgbG9zIGN1cnNvcyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VW4gZWplbXBsbyBkZSA8c3Ryb25nPkN1cnNvcyBkZSBmb3JtYWNpb248L3N0cm9uZz4gcHVlZGUgc2VyOiA8c3Ryb25nPkN1cnNvcyBkZSBFeGNlbCwgV29yZCwgUG93ZXJQb2ludCwgTWFya2V0aW5nPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8IS0tT2ZpY2lvcy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjEyIiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8ub2ZpY2lvc19yZWFsaXphciIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ub2ZpY2lvc19yZWFsaXphciIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YU9maWNpbyIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJPZmljaW9zIHF1ZSBwdWVkZSBwZWFsaXphciIKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgb2ZpY2lvcyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlVuIGVqZW1wbG8gZGUgPHN0cm9uZz5PZmljaW9zPC9zdHJvbmc+IHB1ZWRlIHNlcjogPHN0cm9uZz5Db2NpbmVybywgTWVjw6FuaWNvLCBSZXBhcnRpZG9yLCBldGMuPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPCEtLUlkZWEgTmVnb2dpby0tPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5pZGVhX25lZ29jaW8iCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmlkZWFfbmVnb2NpbyIKICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0ieWVzbm8iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSWRlYSBkZSBuZWdvY2lvPyIKICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjIzIwMjAyZiI+SVYuRXhwZXJpZW5jaWEgTGFib3JhbDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDwhLS12LXJvdyBwYXJ0ZSA0LS0+CiAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICA8IS0tRXhwZXJpZW5jaWEgbGFib3JhbC0tPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmV4cGVyZWNpYV9sYWJvcmFsIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5leHBlcmVjaWFfbGFib3JhbCIKICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0ieWVzbm8iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iUG9zZWUgZXhwZXJpZW5jaWEgbGFib3JhbD8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8IS0tcGVyaW9kbyBlbXBsZW8tLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0IiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLnVsdGltb19wZXJpb2RvX3RyYWJham8iCiAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5leHBlcmVjaWFfbGFib3JhbD09PSdObyciCiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8udWx0aW1vX3BlcmlvZG9fdHJhYmFqbyIKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlBlcmlvZG8gZGUgw7psdGltbyBlbXBsZW8iCiAgICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoyMHB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+VW4gZWplbXBsbyBkZSA8c3Ryb25nPlBlcmlvZG8gZGUgZW1wbGVvPC9zdHJvbmc+IHB1ZWRlIHNlcjogPHN0cm9uZz5FbmVybyBkZSAyMDE3IGhhc3RhIEFnb3N0byBkZSAyMDIwPC9zdHJvbmc+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwhLS1jYXJnby0tPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uY2FyZ29fZGVzZW1wZW5hZG8iCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZXhwZXJlY2lhX2xhYm9yYWw9PT0nTm8nIgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmNhcmdvX2Rlc2VtcGVuYWRvIgogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iQ2FyZ28gZGVzZW1wZcOxYWRvIgogICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgIDwhLS1oYWJpbGlkYWRlcy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjEyIj4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0YXJlYQogICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5oYWJpbGlkYWRlc19wZXJzb25hbGVzIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5oYWJpbGlkYWRlc19wZXJzb25hbGVzIgogICAgICAgICAgICAgICAgICAgICAgbmFtZT0idHhhSGFiaWxpZGFkZXMiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iSGFiaWxpZGFkZXMsIGNhcmFjdGVyaXN0aWNhcyBvIGFjdGl2aWRhZGVzIHBlcnNvbmFsZXMgZW4gcXVlIHNlIGRlc3RhY2EgbyBoYWNlIGJpZW4iCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIGhhYmlsaWRhZGVzLCBjYXJhY3RlcmlzdGljYXMgbyBhY3RpdmlkYWRlcyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgIDwhLS1kaWZpY3VsdGFkZXMtLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmRpZmljdWx0YWRlc19wZXJzb25hbGVzIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5kaWZpY3VsdGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YURpZmljdWx0YWRlcyIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJEaWZpY3VsdGFkZXMsIGNhcmFjdGVyaXN0aWNhcyBvIGFjdGl2aWRhZGVzIHBlcnNvbmFsIHF1ZSBkZWJlIG1lam9yYXIgbyBhcHJlbmRlciIKICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgZGlmaWN1bHRhZGVzLCBjYXJhY3RlcmlzdGljYXMgbyBhY3RpdmlkYWRlcyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8IS0tZGlzcG9uYWJpbGlkYWQgZW1wbGVvLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXgiIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmRpc3BvbmliaWxpZGFkX2hvcmFyaWEiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmRpc3BvbmliaWxpZGFkX2hvcmFyaWEiCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbXM9InRpbWUiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iRGlzcG9uaWJpbGlkYWQgaG9yYXJpYSBwYXJhIGVtcGxlbyIKICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwhLS1vdHJhcyBvYnNlcnZhY2lvbmVzLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8ub3RyYV9vYnNlcnZhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ub3RyYV9vYnNlcnZhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YU90cmFzIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik90cmFzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InBpZV9pbmZvIiA+QW50ZXMgZGUgZW52aWFyIHR1IGluZm9ybWFjacOzbiByZXZpc2EgcXVlIHRvZG8gZXN0ZSBjb3JyZWN0byA8L2gzPgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgICAgICAgPC92LWZvcm0+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtZ3Jvdy0xIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InJlZCBkYXJrZW4tMyIgdGV4dCBAY2xpY2s9ImNlcnJhck1vZGFsIj5DZXJyYXI8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9InN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9IiF2YWxpZCIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlRm9ybSgpIgogICAgICAgICAgICAgICAgICAgID5FbnZpYXIgbWkgaW5mb3JtYWNpb24gPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgIDwvdi10b29sYmFyPgo8L3RlbXBsYXRlPgogICAgICAgICAgPCEtLVRlbXBsYXRlIHBhcmEgbGEgY29sdW1uYSBkZSBhY2Npb25lcyAtLT4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6aXRlbS5hY3Rpb249IntpdGVtfSI+CiAgICAgICAgICAgIDx2LXRvb2x0aXAgdG9wPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7b259Ij4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZWxldmF0aW9uPSI4IgogICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iaXRlbS5pZDwwIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzaG93RWRpdGFyRm9ybShpdGVtKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgQWN0dWFsaXphciBtaSBpbmZvcm1hY2nDs24KICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4gCiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICA8L3YtZGF0YS10YWJsZT4KICAgICAgPC92LWNhcmQ+CiAgICA8L2Rpdj4KCiAgPHYtZm9ybSB2LW1vZGVsPSJ2YWxpZCIgcmVmPSJmb3JtUGVyZmlsIiA6bGF6eS12YWxpZGF0aW9uPSJ0cnVlIiAgdi1zaG93PSJhcnJheUFzcGlyYW50ZS5mb3JtdWxhcmlvX3BlcmZpbD09PSdObyciPgogICAgCiAgICA8di1jb250YWluZXI+CiAgICAgIDxoMyBzdHlsZT0iZm9udC1zaXplOjQwcHg7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6IzIwMjAyZjsiPlJlZ2lzdHJvIGRlIFBlcmZpbCBPY3VwYWNpb25hbCBkZSBHcmFkdWFkbzwvaDM+CiAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICA8dGhlYWQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4IiBjb2xvcj0iIyMyMDIwMmYiPkkuRGF0b3MgUGVyc29uYWxlczwvdGhlYWQ+CiAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgIDwhLS12LXJvdyBwYXJ0ZSAxLS0+CiAgICAgIDx2LXJvdz4KICAgICAgICAgPCEtLW5vbWJyZS0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICA6bGFiZWw9ImFycmF5QXNwaXJhbnRlLm5vbWJyZXMiCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tQXBlbGxpZG8tLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgOmxhYmVsPSJhcnJheUFzcGlyYW50ZS5hcGVsbGlkb3MiCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tZGF0ZXBpY2tlciBkZSBuYWNpbWllbnRvLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIDpsYWJlbD0iYXJyYXlBbHVtbm8uZmVjaGFfbmFjIgogICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgIDwhLS1sdWdhciBkZSBuYWNpbWllbnRvLS0+CiAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5sdWdhcl9uYWMiCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgIGxhYmVsPSJMdWdhciBkZSBuYWNpbWllbnRvIgogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iMjUwIgogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLURpcmVjY2lvbi0tPgogICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgOmxhYmVsPSJhcnJheUFsdW1uby5kaXJlY2Npb24iCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tZXN0YWRvIGNpdmlsLS0+CiAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgIAogICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZXN0YWRvX2NpdmlsIgogICAgICAgICAgOml0ZW1zPSJlc3RhZG9zIgogICAgICAgICAgbGFiZWw9IkVzdGFkbyBDaXZpbCIKICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLU51bWVybyBkZSB0ZWxlZm9uby0tPgogICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIyIiBzdHlsZT0iIGRpc3BsYXk6ZmxleDsiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgIDpsYWJlbD0iYXJyYXlBbHVtbm8uY2VsdWxhciIKICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPkVsIG7Dum1lcm8gcXVlIHB1ZWRlcyB2ZXIgYSBsYSBpenF1aWVyZGEgZXMgdHUgbsO6bWVybyBkZQogICAgICAgICAgICAgICAgIHRlbGVmb25vIHF1ZSB0ZW5lbW9zIHBhcmEgY29udGFjdGFydGUsIHNpIGhhcyBjYW1iaWFkbyBkZSBuw7ptZXJvIHRlbGVmb25pY28uCiAgICAgICAgICAgICAgICAgIFBvciBmYXZvciBpbmdyZXNhIHR1IG51ZXZvIG7Dum1lcm8gZW4gZWwgcmVjdWFkcm8gZGUgPHN0cm9uZz5OdWV2byBuw7ptZXJvPC9zdHJvbmc+IChzaSBubyBoYXMgY2FtYmlhZG8gZGViZXMgZGVqYXJsbyBlbiBibGFuY28pPC9zcGFuPgogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iOCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5jZWx1bGFyMiIKICAgICAgICAgICAgOnJ1bGVzPSJwaG9uZVJ1bGVzIgogICAgICAgICAgICBsYWJlbD0iTnVldm8gbsO6bWVybyIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1EVUktLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgOmxhYmVsPSJhcnJheUFsdW1uby5kdWkiCiAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tTklULS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIxNCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5uaXQiCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgIGxhYmVsPSJOaXQiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1QYXNhcG9ydGUtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIyIiBzdHlsZT0iIGRpc3BsYXk6ZmxleDsiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjkiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ucGFzYXBvcnRlIgogICAgICAgICAgICBsYWJlbD0iUGFzYXBvcnRlIgogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPlNpIHRpZW5lcyA8c3Ryb25nPlBhc2Fwb3J0ZTwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMyIgc3R5bGU9IiBkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iMTQiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubGljZW5jaWFfY29uZHVjaXIiCiAgICAgICAgICAgIGxhYmVsPSJMaWNlbmNpYSBkZSBjb25kdWNpciIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5TaSB0aWVuZXMgPHN0cm9uZz5MaWNlbmNpYSBkZSBjb25kdWNpcjwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPCEtLU5VUC0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMiIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5udXAiCiAgICAgICAgICAgIGxhYmVsPSJOdXAiCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj7Cv1F1w6kgZXMgZWwgTlVQPyBFcyBlbCBOw7ptZXJvIMOabmljbyBQcmV2aXNpb25hbCBxdWUgaWRlbnRpZmljYSBhIGNhZGEgYWZpbGlhZG8KICAgICAgICAgICAgICAgICB5IGVzIGFzaWduYWRvIHBvciBsYSBTdXBlcmludGVuZGVuY2lhIGRlbCBTaXN0ZW1hIEZpbmFuY2llcm8uIFB1ZWRlIGVuY29udHJhcnNlIAogICAgICAgICAgICAgICAgIGbDoWNpbG1lbnRlIGVuIHR1IENhcm7DqSBkZSBhZmlsaWFkbyBhIENPTkZJQSB5IGF1bnF1ZSB0ZSB0cmFzbGFkZXMgYSBvdHJhIEFGUCwKICAgICAgICAgICAgICAgICAgdHUgTlVQIHNlZ3VpcsOhIHNpZW5kbyBlbCBtaXNtbzwvc3Bhbj4gCiAgICAgICAgICAgICAgPHNwYW4+LiBTaSB0aWVuZXMgPHN0cm9uZz5Ow7ptZXJvIMO6bmljbyBwcmV2aXNpb25hbDwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPCEtLU5hY2lvbmFsaWRhZGQtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjEyIgogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm5hY2lvbmFsaWRhZCIKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgICAgbGFiZWw9Ik5hY2lvbmFsaWRhZCIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS0yIElkaW9tYS0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgICAgPHYtYXV0b2NvbXBsZXRlCiAgICAgICAgICAKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5pZHNlZ3VuZG9faWRpb21hIgogICAgICAgICAgICA6aXRlbXMgPSAiYXJyYXlJZGlvbWEiCiAgICAgICAgICAgIGxhYmVsPSJTZWd1bmRvIGlkaW9tYSIKICAgICAgICAgICAgaXRlbS10ZXh0PSJub21icmUiCiAgICAgICAgICAgIGl0ZW0tdmFsdWU9ImlkIgogICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgOm1lbnUtcHJvcHM9InsgY2xvc2VPbkNsaWNrOiB0cnVlIH0iCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICA+PC92LWF1dG9jb21wbGV0ZT4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1uaXZlbCBkZSBJZGlvbWEtLT4KICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICA8di1zZWxlY3QKICAgICAgICAKICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubml2ZWxfaWRpb21hIgogICAgICAgICAgOml0ZW1zPSJpdGVtcyIKICAgICAgICAgIGxhYmVsPSJOaXZlbCBkZSBzZWd1bmRvIGlkaW9tYSIKICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgIDwvdi1yb3c+CiAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPHRoZWFkIHN0eWxlPSJmb250LXNpemU6MjVweCIgY29sb3I9IiMjMjAyMDJmIj5JSS5Fc3RhZG8gRGUgU2FsdWQ8L3RoZWFkPgogICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgIDwhLS12LXJvdyBwYXJ0ZSAyLS0+CiAgICAgIDx2LXJvdz4KICAgICAgPCEtLUVuZmVybWVtZGFkIENyb25pY2EtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZW5mZXJtYWRhZF9tZW5jaW9uIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUGFkZWNlIGFsZ3VuYSBFbmZlcm1lZGFkIENyb25pY2E/IgogICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgIDwhLS1zaT9FbmZlcm1lbWRhZCBDcm9uaWNhLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgOmRpc2FibGVkPSJmb3JtdWxhcmlvLmVuZmVybWFkYWRfbWVuY2lvbj09PSdObyciCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZW5mZXJtZWRhZF9jcm9uaWNhIgogICAgICAgICAgICBsYWJlbD0iU2k/IE1lbmNpb25hciIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1NZWRpY2FtZW50b3MtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubWVkaWNhbWVudG9fcGVybWEiCiAgICAgICAgICAgOml0ZW1zPSJ5ZXNubyIKICAgICAgICAgICAgbGFiZWw9Ik5lY2VzaXRhIG1lZGljYW1lbnRvcyBwZXJtYW5lbnRlcz8iCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICAgICA8IS0tU2k/TWVkaWNhbWVudG9zLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICBjb3VudGVyCiAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19wZXJtYT09PSdObyciCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubWVkaWNhbWVudG9fbWVuY2lvbiIKICAgICAgICAgICAgbGFiZWw9IlNpPyBNZW5jaW9uYXIiCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tRGlzY2FwYWNpZGFkLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZGlzY2FwYWNpZGFkIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUG9zZWUgYWxnw7puIHRpcG8gZGUgZGlzY2FwYWNpZGFkPyIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgIDwvdi1yb3c+CiAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPHRoZWFkIHN0eWxlPSJmb250LXNpemU6MjVweCIgY29sb3I9IiMjMjAyMDJmIj5JSUkuSW5mb3JtYWNpb24gQWNhZMOpbWljYTwvdGhlYWQ+CiAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPCEtLXYtcm93IHBhcnRlIDMtLT4KICAgICAgPHYtcm93PgogICAgICAgIDwhLS1uaXZlbCBhY2FkZW1pY28tLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubml2ZWxfYWNhZGVtaWNvIgogICAgICAgICAgICA6aXRlbXM9Im5pdmVsIgogICAgICAgICAgICBsYWJlbD0iTml2ZWwgYWNhZMOpbWljbyIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgCiAgICAgICAgICAgPCEtLVByYWN0aWNhIFByby0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgIDx2LWF1dG9jb21wbGV0ZQogICAgICAgICAKICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRfY2FycmVyYSIKICAgICAgICAgIDppdGVtcz0iYXJyYXlDYXJyZXJhIgogICAgICAgICAgbGFiZWw9IkVzcGVjaWFsaWRhZCIKICAgICAgICAgIGl0ZW0tdGV4dD0ibm9tYnJlIgogICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgIDptZW51LXByb3BzPSJ7IGNsb3NlT25DbGljazogdHJ1ZSB9IgogICAgICAgID48L3YtYXV0b2NvbXBsZXRlPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgIDwhLS1pbnN0aXR1Y2lvbi0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5pbnN0aXR1Y2lvbl9mb3JtYWRvcmEiCiAgICAgICAgICAgIGxhYmVsPSJJbnN0aXR1Y2lvbiBGb3JtYWRvcmEiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tR3JhZHVhY2lvbi0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRfYW5pb19ncmFkdWFjaW9uIgogICAgICAgICAgICA6aXRlbXMgPSAiYXJyYXlBbmlvcyIKICAgICAgICAgICAgaXRlbS10ZXh0PSJhbmlvIgogICAgICAgICAgICBpdGVtLXZhbHVlPSJpZCIKICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgIDptZW51LXByb3BzPSJ7IGNsb3NlT25DbGljazogdHJ1ZSB9IgogICAgICAgICAgICBsYWJlbD0iQcOxbyBkZSBncmFkdWFjacOzbj8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1DdXJzb3MtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiIgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgIG1heGxlbmd0aD0iMjUwIgogICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5jdXJzb3NfaW5mb3JtYWNpb24iCiAgICAgICAgICBuYW1lPSJ0eGFDdXJzbyIKICAgICAgICAgIGxhYmVsPSJDdXJzb3MgZGUgZm9ybWFjaW9uIgogICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgbG9zIGN1cnNvcyIKICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPlVuIGVqZW1wbG8gZGUgPHN0cm9uZz5DdXJzb3MgZGUgZm9ybWFjaW9uPC9zdHJvbmc+IHB1ZWRlIHNlcjogPHN0cm9uZz5DdXJzb3MgZGUgRXhjZWwsIFdvcmQsIFBvd2VyUG9pbnQsIE1hcmtldGluZzwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgCiAgICAgICAgICA8IS0tT2ZpY2lvcy0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiIGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5vZmljaW9zX3JlYWxpemFyIgogICAgICAgICAgICBuYW1lPSJ0eGFPZmljaW8iCiAgICAgICAgICAgIGxhYmVsPSJPZmljaW9zIHF1ZSBwdWVkZSByZWFsaXphciIKICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgb2ZpY2lvcyIKICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+T2ZpY2lvczwvc3Ryb25nPiBwdWVkZSBzZXI6IDxzdHJvbmc+Q29jaW5lcm8sIE1lY8OhbmljbywgUmVwYXJ0aWRvciwgZXRjLjwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAKICAgICAgICAgIDwhLS1Gb3JtYWNpb24gZW1wcmUtLT4KICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjQgIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZm9ybWFjaW9uX2VtcHJlbmRlIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iRm9ybWFjaW9uIGRlIGVtcHJlbmRpbWllbnRvPyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1pbnN0aXR1Y2lvbiBlbXByZW5kZS0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgCiAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5mb3JtYWNpb25fZW1wcmVuZGU9PT0nTm8nIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaW5zdGl0dXRvX2Zvcm1hZG9yX2VtcHJlZGUiCiAgICAgICAgICAgICAgbGFiZWw9Ikluc3RpdHVjaW9uIGZvcm1hZG9yYSBkZSBlbXByZW5kaW1pZW50byIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1hbmlvIGRlIGZvcm1hY2lvbi0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZm9ybWFjaW9uX2VtcHJlbmRlPT09J05vJyIKICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmFuaW9fZm9ybWFjaW9uIgogICAgICAgICAgICAgIGxhYmVsPSJBw7FvIGRlIGZvcm1hY2lvbiIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICA8IS0tSWRlYSBOZWdvZ2lvLS0+CiAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSIyIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRlYV9uZWdvY2lvIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iSWRlYSBkZSBuZWdvY2lvPyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICA8dGhlYWQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4IiBjb2xvcj0iIyMyMDIwMmYiPklWLkV4cGVyaWVuY2lhIExhYm9yYWw8L3RoZWFkPgogICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPCEtLXYtcm93IHBhcnRlIDQtLT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICA8IS0tRXhwZXJpZW5jaWEgbGFib3JhbC0tPgogICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXgiIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgIAogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmV4cGVyZWNpYV9sYWJvcmFsIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUG9zZWUgZXhwZXJpZW5jaWEgbGFib3JhbD8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8IS0tcGVyaW9kbyBlbXBsZW8tLT4KICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiIGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgIG1heGxlbmd0aD0iMTAwIgogICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5leHBlcmVjaWFfbGFib3JhbD09PSdObyciCiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby51bHRpbW9fcGVyaW9kb190cmFiYWpvIgogICAgICAgICAgICAgIGxhYmVsPSJQZXJpb2RvIGRlIMO6bHRpbW8gZW1wbGVvIgogICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+UGVyaW9kbyBkZSBlbXBsZW88L3N0cm9uZz4gcHVlZGUgc2VyOiA8c3Ryb25nPkVuZXJvIGRlIDIwMTcgaGFzdGEgQWdvc3RvIGRlIDIwMjA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPCEtLWNhcmdvLS0+CiAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iMjAwIgogICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZXhwZXJlY2lhX2xhYm9yYWw9PT0nTm8nIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uY2FyZ29fZGVzZW1wZW5hZG8iCiAgICAgICAgICAgICAgbGFiZWw9IkNhcmdvIGRlc2VtcGXDsWFkbyIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICA8IS0taGFiaWxpZGFkZXMtLT4KICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjEyIj4KICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaGFiaWxpZGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgbmFtZT0idHhhSGFiaWxpZGFkZXMiCiAgICAgICAgICAgIGxhYmVsPSJIYWJpbGlkYWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMgcGVyc29uYWxlcyBlbiBxdWUgc2UgZGVzdGFjYSBvIGhhY2UgYmllbiIKICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgaGFiaWxpZGFkZXMsIGNhcmFjdGVyaXN0aWNhcyBvIGFjdGl2aWRhZGVzIgogICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgPCEtLWRpZmljdWx0YWRlcy0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5kaWZpY3VsdGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgbmFtZT0idHhhRGlmaWN1bHRhZGVzIgogICAgICAgICAgICBsYWJlbD0iRGlmaWN1bHRhZGVzLCBjYXJhY3RlcmlzdGljYXMgbyBhY3RpdmlkYWRlcyBwZXJzb25hbCBxdWUgZGViZSBtZWpvcmFyIG8gYXByZW5kZXIiCiAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIGRpZmljdWx0YWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMiCiAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgPC92LWNvbD4KICAgICAKICAgICAgICAgICA8IS0tZGlzcG9uYWJpbGlkYWQgZW1wbGVvLS0+CiAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgIAogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmRpc3BvbmliaWxpZGFkX2hvcmFyaWEiCiAgICAgICAgICAgIDppdGVtcz0idGltZSIKICAgICAgICAgICAgbGFiZWw9IkRpc3BvbmliaWxpZGFkIGhvcmFyaWEgcGFyYSBlbXBsZW8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgPCEtLWRpc3BvbmFiaWxpZGFkIGVtcGxlby0tPiAKICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjYiPgogICAgICAgICAgICA8IS0tVHJhc2xhZG8tLT4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgIAogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iRGlzcG9uaWJpbGlkYWQgcGFyYSB0cmFzbGFkYXJzZSBmdWVyYSBkZSBDaGFsYXRlbmFuZ28iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8IS0tb3RyYXMgb2JzZXJ2YWNpb25lcy0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgPHYtdGV4dGFyZWEgCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ub3RyYV9vYnNlcnZhY2lvbiIKICAgICAgICAgICAgbmFtZT0idHhhT3RyYXMiCiAgICAgICAgICAgIGxhYmVsPSJPdHJhcyBvYnNlcnZhY2lvbmVzIgogICAgICAgICAgICB2YWx1ZT0iIgogICAgICAgICAgICBoaW50PSJFc2NyaWJhIHN1cyBvYnNlcnZhY2lvbmVzIgogICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgPC92LXJvdz4KICAgICAgICA8aDMgY2xhc3M9InBpZV9pbmZvIiA+QW50ZXMgZGUgZW52aWFyIHR1IGluZm9ybWFjacOzbiByZXZpc2EgcXVlIHRvZG8gZXN0ZSBjb3JyZWN0byA8L2gzPgogICAgPC92LWNvbnRhaW5lcj4KICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgIDx0ZW1wbGF0ZT4KICAgIDx2LWJ0biBibG9jayBjb2xvcj0iIzgxNDY5MCIgZGFyayAgCiAgICAgICB2LXNob3c9ImFycmF5QXNwaXJhbnRlLmZvcm11bGFyaW9fcGVyZmlsPT09J05vJyIKICAgICAgZWxldmF0aW9uPSI4IgogICAgICBAY2xpY2s9InNhdmVGb3JtKCkiCiAgICA+RW52aWFyIG1pIGluZm9ybWFjacOzbjwvdi1idG4+CiAgICA8L3RlbXBsYXRlPgogIDwvdi1mb3JtPgo8L2Rpdj4K"},null]}
{"remainingRequest":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&","dependencies":[{"path":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\src\\components\\HelloWorld.vue","mtime":1613104467046},{"path":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607976917000},{"path":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1607976917000},{"path":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607976917000},{"path":"C:\\Users\\darks\\Documents\\GitHub\\SIIL-Diciembre2020\\siil-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1613443177494}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAgPHNlY3Rpb24+CiAgICAgICA8di1vdmVybGF5IDp2YWx1ZT0ibG9hZGVyIiA6ei1pbmRleD0iJzk5OTk5OTk5JyI+CiAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgaW5kZXRlcm1pbmF0ZSBzaXplPSI4MCIgY29sb3I9ImdyZXkgZGFya2VuLTQiPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICAgICAgPC92LW92ZXJsYXk+CiAgICAgIDx0ZW1wbGF0ZSA+CiAgICAgICAgPHYtY2FyZCBzdHlsZT0ibWFyZ2luOjIwcHgiPgogICAgICAgIDx2LWNhcm91c2VsCiAgICAgICAgc2hvdy1hcnJvd3Mtb24taG92ZXIgY3ljbGUgaW50ZXJ2YWw9IjIwMDAwIiBjbGFzcz0ibXQtNiIgaGVpZ2h0PSIyMDAiICB2LW1vZGVsPSJtb2RlbCI+CiAgICAgICAgICA8di1jYXJvdXNlbC1pdGVtCiAgICAgICAgICAgIHYtZm9yPSIoY29sb3IsIGkpIGluIGNvbG9ycyIKICAgICAgICAgICAgOmtleT0iaSIKICAgICAgICAgICAgOnNyYz0iJy9pdGNoYS8nKyBjb2xvci5zcmMiCiAgICAgICAgICA+CiAgICAgICAgICA8L3YtY2Fyb3VzZWwtaXRlbT4KCiAgICAgICAgPC92LWNhcm91c2VsPgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3RlbXBsYXRlPgogICAgPHYtY29udGFpbmVyIGZsdWlkIHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZSIgPgogICAgICA8ZGl2IGlkPSJ0aXRsZW9mZXJ0YSIgPgogICAgICAKICAgICAgICA8aDE+T2ZlcnRhcyBkZSBFbXBsZW88L2gxPgogICAgICAgIAogICAgICA8L2Rpdj4KCiAgICAgIAogIDxkaXYgaWQ9InByaW5jaXBhbGNhcmQiPgogICAgICA8di1jb2wKICAgICAgICBjbGFzcz0iZC1mbGV4IgogICAgICAgIGNvbHM9IjEyIgogICAgICAgIHNtPSI0IgogICAgICA+CiAgICAgICAgCiAgICAgICAgPHYtYXV0b2NvbXBsZXRlCiAgICAgICAgY2xhc3M9Im1sLTUiCiAgICAgICAgICB3aWR0aD0iMTAwIgogICAgICAgICAgIHYtbW9kZWw9ImFycmF5YnVzcXVlZGEiCiAgICAgICAgICAgIGxhYmVsPSJCdXNjYXIgUG9yIgogICAgICAgICAgICA6aXRlbXM9ImFycmF5QXJlYXMiCiAgICAgICAgICAgIDppdGVtLXRleHQ9Iidub21icmUnIgogICAgICAgICAgICA6aXRlbS12YWx1ZT0iJ25vbWJyZSciCiAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICBzb2xvCiAgICAgICAgICAgIEBjaGFuZ2U9Im9mZXJ0YXVwZCgpIgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA+PC92LWF1dG9jb21wbGV0ZT4KICAgICAgICAgICAgIAogICAgICAgIAogICAgICAKCiAgICAgICAgICA8di1hdXRvY29tcGxldGUKICAgICAgICBjbGFzcz0ibWwtNSIKICAgICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgICAKICAgICAgICAgICB2LW1vZGVsPSJhcnJheWJ1c3F1ZWRhIgogICAgICAgICAgICBsYWJlbD0iWm9uYSBkZSBUcmFiYWpvcyIKICAgICAgICAgICAgOml0ZW1zPSJmaW5kd29yayIKICAgICAgICAgICAgOml0ZW0tdGV4dD0iJ2x1Z2FyX3RyYWJham8nIgogICAgICAgICAgICA6aXRlbS12YWx1ZT0iJ2x1Z2FyX3RyYWJham8nIgogICAgICAgICAgICAgZGVuc2UKICAgICAgICAgICAgc29sbwogICAgICAgICAgICBAY2hhbmdlPSJmaW5kd29ya2xpc3QoKSIKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPjwvdi1hdXRvY29tcGxldGU+CiAgICAgICAgICAKICAgICAgICAgPC92LWNvbD4KICAgICAgICAgCiAgICAgICAgIDx2LXByb2dyZXNzLWxpbmVhcgogICAgICAgICAgY29sb3I9ImJsdWUtZ3JleSBsaWdodGVuLTEiCiAgICAgICAgICByb3VuZGVkCiAgICAgICAgPjwvdi1wcm9ncmVzcy1saW5lYXI+CiAgICAgIAoKICAgICAgICAKCiAgICAgIDwhLS0gRGVmYXVsdCBib3ggLS0+CiAgICAgCiAgICAgIDx2LXJvdyBjbGFzcz0icm93IGFsaWduLWNvbnRlbnQtYmV0d2VlbiAgbXQtNSByb3VuZGVkIiBkZW5zZT4KICAgICAgICA8IS0tQ29taWVuem8gZGVsIGNhcmQKICAgICAgICA8di1pbWcgIGlkPSJjYXJkaW1nIiBjbGFzcz0iaW1nLWNpcmNsZSBpbWctZmx1aWQgZWxldmF0aW9uLTEiIDpzcmM9IicvSW1nT2ZlcnRhcy8nKyBpdGVtLmltZyIgICBoZWlnaHQ9IjE2MCI+PC92LWltZz4KICAgICAgICAgLS0+ICAgCiAgICAgICAgPHYtY2FyZCBpZD0iY2FyZG9mZXJ0YSIgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGl0ZW1zIiA6a2V5PSJpbmRleCIgdi1zaG93PSJtb3N0YXIgPT0gdHJ1ZSIgICBjbGFzcz0ibXgtYXV0byBlbGV2YXRpb24tNiIgd2lkdGg9IjI5NSIgIHN0eWxlPSJtYXJnaW46IDIwcHgiID4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSIgdGV4dC1jZW50ZXIiID4KICAgICAgICAgICAgICAgIDx2LWF2YXRhciAKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC00ICIKICAgICAgICAgICAgICAgICAgICAgIHNpemU9IjE0MCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9ImJvcmRlcjoycHggc29saWQgZ3JleSIKICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSInL0ltZ09mZXJ0YXMvJysgaXRlbS5pbWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJsb2FkaW1hZ2UoaXRlbS5pbWcpIgogICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiA+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWRyZSIgIHN0eWxlPSJwYWRkaW5nLWxlZnQ6NnB4OyI+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGUgdi1iaW5kPSJpdGVtcyIgPgogICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZm9udC1pdGFsaWMgIiBzdHlsZT0ibWFyZ2luLXRvcDo0MHB4O2JvcmRlci1ib3R0b206MnB4IHNvbGlkIGdyZXk7bWFyZ2luLWJvdHRvbToxMHB4IiA+PGI+e3tpdGVtLmlkZW1wcmVzYX19PC9iPjwvaDM+CiAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGUgc3R5bGU9ImZvbnQtc2l6ZTogMTNweDsiID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+d29yazwvdi1pY29uPiZuYnNwOzxiPlZhY2FudGU6Jm5ic3A7Jm5ic3A7PC9iPnt7aXRlbS5jYXJnb319CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGUgc3R5bGU9ImZvbnQtc2l6ZTogMTNweDsiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+Z3JvdXBzPC92LWljb24+ICZuYnNwOzxiPkN1cG9zIGRpc3BvbmlibGVzOiZuYnNwOyZuYnNwOzwvYj48c3Ryb25nIHN0eWxlPSJmb250LXNpemU6IDE1cHg7bWFyZ2luLXJpZ3RoOjJweCI+e3tpdGVtLnZhY2FudGV9fTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXN1YnRpdGxlPgoKICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXN1YnRpdGxlIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij4KICAgICAgICAgICAgICAgICAgICA8di1pY29uPmJ1c2luZXNzPC92LWljb24+ICZuYnNwOzxiPkx1Z2FyIGRlIHRyYWJham86Jm5ic3A7Jm5ic3A7PC9iPnt7aXRlbS5sdWdhcl90cmFiYWpvfX0KICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KCiAgICAgICAgICAgICAgICAgICA8IS0tIDx2LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5idXNpbmVzczwvdi1pY29uPiAmbmJzcDs8Yj4gRGlyZWNjaW9uOiZuYnNwOyZuYnNwOzwvYj57e2l0ZW0uZGlyZWNjaW9ufX0KICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4tLT4KICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXN1YnRpdGxlIHN0eWxlPSJmb250LXNpemU6IDEzcHg7bWFyZ2luLWJvdHRvbToyMHB4OyIgPgogICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5jYWxsPC92LWljb24+Jm5ic3A7PGI+dGVsZWZvbm86Jm5ic3A7Jm5ic3A7PC9iPnt7aXRlbS50ZWxlZm9ub319CiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtc3VidGl0bGU+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zIGlkPSJjYXJkYWN0aW9ucyIgPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWNlbnRlciBtdC0xNCAiIGNvbHM9IjciIDpzbT0ic20iIHN0eWxlPSJkaXNwbGF5OmZsZXg7bWFyZ2luLWxlZnQ6MXB4Ij4KICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIHRvcD4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ie29ufSI+CiAgICAgICAgICAgICAgICAgICAgICA8di1idG4gQGNsaWNrPSJMb2FkTW9kYWwoaXRlbS5pZHJlcXVpc2l0bykiIAogICAgICAgICAgICAgICAgICAgICAgaWQ9ImJ0bmNhcmQiIAogICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uPSIxMCIgCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIKICAgICAgICAgICAgICAgICAgICAgICBkYXJrIGNsYXNzPSJtYi0yIG10LTMiIAogICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIEluZm9ybWFjaW9uJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+aW5mbzwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1hcyBJbmZvcm1hY2lvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KCiAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI1IiBzbT0iNSIgIGNsYXNzPSJtdC02IGQtZmxleCIgPgogICAgICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIHRvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ie29ufSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0ic2hvdyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXItMSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iYmx1ZS1ncmV5IGxpZ2h0ZW4tMyIgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGV2YXRpb249IjgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJpdGVtLmlkIDwgMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImRlc2FjdGl2YXJPZmVydGEoaXRlbS5pZCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGVzYWN0aXZhciBPZmVydGE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sdGlwPgoKICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgdG9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7b259Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1zaG93PSJzaG93IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0ibGlnaHQtYmx1ZSBsaWdodGVuLTMiICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbj0iOCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJpdGVtLmlkIDwgMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2hvd01vZGFsVXBkKGl0ZW0pIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPmNyZWF0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BY3R1YWxpemFyIE9mZXJ0YTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRvb2x0aXA+ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgCiAgICAgICAgIDx2LWNhcmQgc3R5bGU9Im1hcmdpbjogMCBhdXRvO21hcmdpbi1ib3R0b206MjBweCIgIHYtc2hvdz0ibW9zdGFyID09IGZhbHNlIj4KICAgICAgICAgICAgPGRpdiA+CiAgICAgICAgICAgICAgPGgxPk5vIGhheSBPZmVydGFzIFBvciBlbCBtb21lbnRvPC9oMT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvdi1jYXJkPgogICAgICAgIAogICAgICAgICAgICA8IS0tRmluYWxpemEgZWwgY2FyZCAtLT4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgPC9kaXY+CiAgICAgIDx2LXByb2dyZXNzLWxpbmVhcgogICAgICAgICAgY29sb3I9ImJsdWUtZ3JleSBsaWdodGVuLTEiCiAgICAgICAgICByb3VuZGVkCiAgICAgICAgPjwvdi1wcm9ncmVzcy1saW5lYXI+CiAgICAgICAgPHRlbXBsYXRlPgogICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIG10LTQiPgogICAgICAgICAgPHYtcGFnaW5hdGlvbgogICAgICAgICAgICB2LWlmPSJhcnJheWJ1c3F1ZWRhID09ICdUb2RhcyciCiAgICAgICAgICAgIHYtbW9kZWw9InBhZ2UiCiAgICAgICAgICAgIDpsZW5ndGg9InBhZ2luYXRpb24ubGFzdF9wYWdlIgogICAgICAgICAgICBjaXJjbGUKICAgICAgICAgICAgQGlucHV0PSJjaGFuZ2VQYWdlIgogICAgICAgICAgPjwvdi1wYWdpbmF0aW9uPgogICAgICAgIDwvZGl2PgogICAgICA8L3RlbXBsYXRlPgogICAgPC92LWNvbnRhaW5lcj4KCiAgICAKICAgIAogIAogICAgICAgIDwhLS0gTW9kYWwgZGUgUG9sbG8gQ2FtcGVybyAtLT4KICAgICAgIDxzZWN0aW9uPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZyIgcGVyc2lzdGVudCAgd2lkdGg9IjU2MCIgPgogICAgICAgICAgIAogICAgICAgICAgICA8di1jYXJkIGlkPSJjYXJkZm9ybTEiIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGRhdGFtb2RhbCIgOmtleT0iaW5kZXgiID4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlID4KICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgPHYtY2FyZCBpZD0iY2FyZHRpdHRsZSIgY2xhc3M9Im10LTEiIHdpZHRoPSIxMDAlIiA+CiAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlID4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLWxlZnQ6NXB4OyI+CiAgICAgICAgICAgICAgICAgICAgIDx2LWF2YXRhciAKICAgICAgICAgICAgICAgICAgICAgIHNpemU9IjU1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzdHlsZT0iYm9yZGVyOjJweCBzb2xpZCBncmV5IgogICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IicvSW1nT2ZlcnRhcy8nKyBpdGVtLmltZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkpvaG4iCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLWxlZnQ6MTBweDtmb250LXNpemU6MjJweDsiPgogICAgICAgICAgICAgICAgICAgICAgIE9mZXJ0YSBkZSBFbXBsZW8gLSZuYnNwO3t7aXRlbS5pZGVtcHJlc2F9fQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgPHYtY2FyZC1zdWJ0aXRsZSBjbGFzcz0ibXQtMSI+CiAgICAgICAgICAgICAgICA8aDM+SS5SZXF1aXNpdG9zIGRlbCBFbXBsZW88L2gzPgogICAgICAgICAgICAgIDwvdi1jYXJkLXN1YnRpdGxlPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx2LWNhcmQgc3R5bGU9Im1hcmdpbi1ib3R0b206MTZweDttYXJnaW4tcmlnaHQ6MTBweDttYXJnaW4tbGVmdDoxMHB4Ij4KICAgICAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCB2LXNob3c9Iml0ZW0uZWRhZCI+PGg0Pjx2LWljb24+dmVyaWZpZWQ8L3YtaWNvbj48c3Ryb25nIGlkPSJiYWNrZ3JvdW5kaXRlbSI+RWRhZCA6PC9zdHJvbmc+Jm5ic3A7Jm5ic3A7IHt7aXRlbS5lZGFkfX0mbmJzcDtBw7FvczwvaDQ+PC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IHYtc2hvdz0iaXRlbS5uaXZlbF9hY2FkZW1pY28iPjxoND48di1pY29uPnNjaG9vbDwvdi1pY29uPjxzdHJvbmcgaWQ9ImJhY2tncm91bmRpdGVtIj5OaXZlbCBhY2FkZW1pY286PC9zdHJvbmc+Jm5ic3A7Jm5ic3A7IHt7aXRlbS5uaXZlbF9hY2FkZW1pY299fTwvaDQ+PC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IHYtc2hvdz0iaXRlbS5nZW5lcm8iPjxoND48di1pY29uPmFjY2Vzc2liaWxpdHk8L3YtaWNvbj48c3Ryb25nIGlkPSJiYWNrZ3JvdW5kaXRlbSI+R2VuZXJvOjwvc3Ryb25nPiZuYnNwOyZuYnNwOyB7e2l0ZW0uZ2VuZXJvfX08L2g0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCB2LXNob3c9Iml0ZW0uaG9yYXJpbyI+PGg0Pjx2LWljb24+c2NoZWR1bGU8L3YtaWNvbj48c3Ryb25nIGlkPSJiYWNrZ3JvdW5kaXRlbSI+SG9yYXJpbzo8L3N0cm9uZz4mbmJzcDsmbmJzcDsge3tpdGVtLmhvcmFyaW99fTwvaDQ+PC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IHYtc2hvdz0iaXRlbS5saWNlbmNpYSI+PGg0Pjx2LWljb24+cmVjZW50X2FjdG9yczwvdi1pY29uPjxzdHJvbmcgaWQ9ImJhY2tncm91bmRpdGVtIj5MaWNlbmNpYSBkZSBDb25kdWNpcjo8L3N0cm9uZz4mbmJzcDsmbmJzcDsge3tpdGVtLmxpY2VuY2lhfX08L2g0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCB2LXNob3c9Iml0ZW0uZXhwZXJpZW5jaWEiPjxoND48di1pY29uPnNjaWVuY2U8L3YtaWNvbj48c3Ryb25nIGlkPSJiYWNrZ3JvdW5kaXRlbSI+RXhwZXJpZW5jaWE6PC9zdHJvbmc+Jm5ic3A7Jm5ic3A7IHt7aXRlbS5leHBlcmllbmNpYX19PC9oND48L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgdi1zaG93PSJpdGVtLmNvbm9jaW1pZW50byIgPjxoND48di1pY29uPmNhc3RfZm9yX2VkdWNhdGlvbjwvdi1pY29uPjxzdHJvbmcgaWQ9ImJhY2tncm91bmRpdGVtIj5Db25vY2ltaWVudG9zOjwvc3Ryb25nPiZuYnNwOyZuYnNwOyB7e2l0ZW0uY29ub2NpbWllbnRvfX08L2g0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgPHYtY2FyZC1zdWJ0aXRsZSBjbGFzcz0ibXQtMSI+CiAgICAgICAgICAgICAgICA8aDM+SUkuT2ZyZWNlPC9oMz4KICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgIAogICAgICAgICAgICAgIDx2LWNhcmQgc3R5bGU9Im1hcmdpbi1ib3R0b206MTZweDttYXJnaW4tcmlnaHQ6MTBweDttYXJnaW4tbGVmdDoxMHB4Ij4KICAgICAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCA+PGg0Pjx2LWljb24+bW9uZXRpemF0aW9uX29uPC92LWljb24+PHN0cm9uZyBpZD0iYmFja2dyb3VuZGl0ZW0iPiZuYnNwOyZuYnNwO1NhbGFyaW86ICQ8L3N0cm9uZz57e2l0ZW0uc2FsYXJpb319PC9oND48L3YtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgdi1zaG93PSJpdGVtLmFtYmllbnRlIiA+PGg0Pjx2LWljb24+c2VsZl9pbXByb3ZlbWVudDwvdi1pY29uPjxzdHJvbmcgaWQ9ImJhY2tncm91bmRpdGVtIj48L3N0cm9uZz57e2l0ZW0uYW1iaWVudGV9fTwvaDQ+PC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IHYtc2hvdz0iaXRlbS5wcmVzdGFjaW9uZXMiID48aDQ+PHYtaWNvbj5nYXZlbDwvdi1pY29uPjxzdHJvbmcgaWQ9ImJhY2tncm91bmRpdGVtIj48L3N0cm9uZz57e2l0ZW0ucHJlc3RhY2lvbmVzfX08L2g0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dCB2LXNob3c9Iml0ZW0uY29taWNpb24iID48aDQ+PHYtaWNvbj5hY2NvdW50X2JhbGFuY2U8L3YtaWNvbj48c3Ryb25nIGlkPSJiYWNrZ3JvdW5kaXRlbSI+PC9zdHJvbmc+e3tpdGVtLmNvbWljaW9ufX08L2g0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgIAogICAgICAgICAgICAgICA8di1jYXJkLXRleHQgdi1zaG93PSJpdGVtLmNvbnRhY3RvIj4gPHYtYWxlcnQKICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICAgIGRlbnNlCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iaW5mbyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgIFB1ZWRlcyBlbnZpYSB0dSBpbmZvcm1hY2lvbiBhbCAmbmJzcDsmbmJzcDt7e2l0ZW0uY29udGFjdG99fQogICAgICAgICAgICAgICAgPC92LWFsZXJ0Pjwvdi1jYXJkLXRleHQ+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD48aDUgaWQ9InB1YmxpY2FkbzIiPjx2LWljb24+ZGF0ZV9yYW5nZTwvdi1pY29uPjxzdHJvbmcgaWQ9InB1YmxpY2Fkb3BvciI+RmVjaGEgZGUgUHVibGljYWNpb246PC9zdHJvbmc+e3tpdGVtLnVwZGF0ZWRfYXR9fSA8L2g1Pjwvdi1jYXJkLXRleHQgPgoKICAgICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0icm93ICIganVzdGlmeT0ic3BhY2UtYXJvdW5kIiBkZW5zZT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJ0ZXh0LWxlZnQgIiBjb2xzPSI2IiBzbT0iNCIgPgogICAgICAgICAgICAgICAgICA8IS0tPHYtYnRuIGNsYXNzPSJtci0yIiBAY2xpY2s9InNob3dNb2RhbFVwZCA9IGZhbHNlIiBjb2xvcj0ic3VjY2VzcyI+VXBkYXRlPC92LWJ0bj4tLT4KICAgICAgICAgICAgICAgICAgPHYtYnRuIHRleHQgIGxhcmdlIEBjbGljaz0iZGlhbG9nID0gZmFsc2UiIGNvbG9yPSJyZWQgYWNjZW50LTMiPjx2LWljb24+dW5kbzwvdi1pY29uPkF0cmFzPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9InRleHQtcmlnaHQgIiBjb2xzPSI2IiBzbT0iNCIgPgogICAgICAgICAgICAgICAgICA8IS0tPHYtYnRuIGNsYXNzPSJtci0yIiBAY2xpY2s9InNob3dNb2RhbFVwZCA9IGZhbHNlIiBjb2xvcj0ic3VjY2VzcyI+VXBkYXRlPC92LWJ0bj4tLT4KICAgIAogICAgICAgICAgICAgICAgICA8di1idG4gQGNsaWNrPSJhcHBseU9mZmVyKGl0ZW0uaWRvZmVydGEpIiBjbGFzcz0ibXItMiIgIGNvbG9yPSJwcmltYXJ5Ij48di1pY29uPnRvdWNoX2FwcDwvdi1pY29uPkFwbGljYXI8L3YtYnRuPgoKICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4gICAgICAgICAgICAgICAKICAgICAgICAgICAgPC92LWNhcmQ+ICAgICAgICAgICAKICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIAogICAgICA8L3NlY3Rpb24+CgoKCiAgICAgIDxzZWN0aW9uPgogICAgICAgIDx0ZW1wbGF0ZT4KICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciAiPgogICAgICAgICAgPHYtZGlhbG9nCiAgICAgICAgICAgIHYtbW9kZWw9Im1vZGFsSW1nIgogICAgICAgICAgICB3aWR0aD0iNTAwIgogICAgICAgICAgPgogICAgICAgICAgPHYtY2FyZD4gICAgICAgICAgICAgCiAgICAgICAgICAgICAgIDx2LWltZyB3aWR0aD0iNTAwIiA6c3JjPSInL0ltZ09mZXJ0YXMvJysgdGhpcy5pbWciPjwvdi1pbWc+CiAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgPC9kaXY+CiAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICA8di1kaWFsb2cKICAgICAgICB2LW1vZGVsPSJtb2RhbFVwZCIKICAgICAgICB0cmFuc2l0aW9uPSJkaWFsb2ctYm90dG9tLXRyYW5zaXRpb24iCiAgICAgICAgbWF4LXdpZHRoPSI4MDAiCiAgICAgICAgPgoKICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ9ImRpYWxvZyI+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgIDx2LXRvb2xiYXIKICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICBkYXJrCiAgICAgICAgPjx2LWljb24gY2xhc3M9Im1yLTIiPnVwZGF0ZTwvdi1pY29uPjxoMz5BY3R1YWxpemFyIE9mZXJ0YTwvaDM+CiAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgIDx2LWNhcmQtYWN0aW9ucyBjbGFzcz0ianVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICA8di1idG4gY2xhc3M9Im10LTEgbWItMSIKICAgICAgICAgICAgICAgIGNvbG9yPSJyZWQgZGFya2VuLTMiCiAgICAgICAgICAgICAgICBlbGV2YXRpb249IjQiCiAgICAgICAgICAgICAgICBmYWIKICAgICAgICAgICAgICAgIEBjbGljaz0iZGlhbG9nLnZhbHVlID0gZmFsc2UiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA+PHYtaWNvbiBjbGFzcz0ibXItMSIgY29sb3I9IndoaXRlIj5jbG9zZTwvdi1pY29uPjwvdi1idG4+CiAgICAgICAgIDwhLS0gPHYtYnRuCiAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgIEBjbGljaz0iZGlhbG9nLnZhbHVlID0gZmFsc2UiCiAgICAgICAgICA+Q2VycmFyPHYtaWNvbiBjbGFzcz0ibXItMSIgY29sb3I9ImVycm9yIj5jbG9zZTwvdi1pY29uPjwvdi1idG4+LS0+CiAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LXRvb2xiYXI+CgogICAgPCEtLSoqIE1vZGFsIGRlIEFjdHVhbGl6YWNpb24qKi0tPgogICAgPHYtZm9ybSByZWY9ImZvcm1vZmVydGFVcGQiIHYtbW9kZWw9InZhbGlkRm9ybSIgOmxhenktdmFsaWRhdGlvbj0idHJ1ZSIgPgogICAgICAgIAogICAgICAgICAgPHYtY29udGFpbmVyPgogICAgICAgICAgPHYtY2FyZCBpZD0iY2FyZGZvcm0xIj4KICAgICAgICAgICAgPHYtY2FyZC10aXRsZT48aDQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4Ij5JLiBEYXRvcyBkZSBsYXMgb2ZlcnRhczwvaDQ+PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgIG1kPSI0IgogICAgICAgICAgICAgIHN0eWxlPSIgZGlzcGxheTpmbGV4O21hcmdpbjogMCAxMHB4OyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJvZmVydGFzLmNhcmdvIgogICAgICAgICAgICAgICAgOnJ1bGVzPSJbdiA9PiAhIXYgfHwgJ0VzdGUgQ2FtcG8gZXMgcmVxdWVyaWRvJ10iCiAgICAgICAgICAgICAgICBsYWJlbD0iQ2FyZ28iCiAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbT4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSI+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj52YWNhbnRlIHF1ZSBvZnJlY2UgbGEgZW1wcmVzYTwvc3Bhbj4KICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L3YtY29sPgoKCiAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBtZD0iMyIKICAgICAgICAgICAgICBzdHlsZT0iIGRpc3BsYXk6ZmxleDttYXJnaW46IDAgMTBweDsiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAgICAgbWluPSIxIgogICAgICAgICAgICAgICAgdi1tb2RlbD0ib2ZlcnRhcy5zYWxhcmlvIgogICAgICAgICAgICAgICAgOmRpc2FibGVkPSJvZmVydGFzLnNhbGFyaW8gPT0gJ0FkZWZpbmlyJyIKICAgICAgICAgICAgICAgIDpydWxlcz0iW3YgPT4gISF2IHx8ICdFc3RlIENhbXBvIGVzIHJlcXVlcmlkbyddIgogICAgICAgICAgICAgICAgbGFiZWw9IlNhbGFyaW8iCiAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8di1jaGVja2JveAogICAgICAgICAgICAgIGNsYXNzPSJtbC01IgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdi1tb2RlbD0ib2ZlcnRhcy5zYWxhcmlvIgogICAgICAgICAgICAgICAgbGFiZWw9IkFkZWZpbmlyIgogICAgICAgICAgICAgICAgdmFsdWU9IkFkZWZpbmlyIgogICAgICAgICAgICAgID48L3YtY2hlY2tib3g+CiAgICAgICAgICAgIDwvdi1jb2w+CgoKCiAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgIG1kPSIyIgogICAgICAgICAgICA+CiAgICAgICAgCiAgICAgICAgICAgIDx2LXRleHQtZmllbGQgCiAgICAgICAgICAgICAgICB0eXBlPSJudW1iZXIiCiAgICAgICAgICAgICAgICBtaW49IjEiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJvZmVydGFzLnZhY2FudGUiCiAgICAgICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgICAgIGxhYmVsPSJWYWNhbnRlcyBDYW50LiIKICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBtZD0iMyIKICAgICAgICAgICAgPgoKICAgICAgICAgICAgICA8di1hdXRvY29tcGxldGUKICAgICAgICAgICAgICAgIHYtbW9kZWw9Im9mZXJ0YXMudmFsdWVpZCIgICAgICAgICAgCiAgICAgICAgICAgICAgICBsYWJlbD0iRW1wcmVzYXMiCiAgICAgICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgICAgIDppdGVtcz0iYXJyYXlFbXByZXNhcyIKICAgICAgICAgICAgICAgIDppdGVtLXRleHQ9Iidub21icmUnIgogICAgICAgICAgICAgICAgOml0ZW0tdmFsdWU9IidpZCciCiAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgID48L3YtYXV0b2NvbXBsZXRlPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBtZD0iMyIKICAgICAgICAgICAgICBzdHlsZT0iIGRpc3BsYXk6ZmxleDttYXJnaW46IDAgMTBweDsiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAgICAgdi1tb2RlbD0ib2ZlcnRhcy5jb250YWN0byIKICAgICAgICAgICAgICAgIDpydWxlcz0iW3YgPT4gISF2IHx8ICdFc3RlIENhbXBvIGVzIHJlcXVlcmlkbyddIgogICAgICAgICAgICAgICAgbGFiZWw9IkNvbnRhY3RvIgogICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CgogICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAgICAgICAgIDx2LWljb24gICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5Db250YWN0byBwYXJhIGVudmlhciBpbmZvcm1hY2kmb2FjdXRlO24gcHVlZGUgc2VyIHRlbGVmb25vIG8gRS1tYWlsPC9zcGFuPgogICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICAgIDwvdi1jb2w+CgogICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBzbT0iNiIKICAgICAgICAgICAgICBtZD0iMyIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di10ZXh0LWZpZWxkIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHYtbW9kZWw9Im9mZXJ0YXMubHVnYXJfdHJhYmFqbyIKICAgICAgICAgICAgICAgIDpydWxlcz0iW3YgPT4gISF2IHx8ICdFc3RlIENhbXBvIGVzIHJlcXVlcmlkbyddIgogICAgICAgICAgICAgICAgbGFiZWw9InpvbmEgZGUgbGEgdmFjYW50ZSIKICAgICAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8IS0tIDx2LWF1dG9jb21wbGV0ZSBsYWJlbD0iVXN1YXJpbyBkZSByZWdpc3RybyIKICAgICAgICAgICAgOnJ1bGVzPSJbdiA9PiAhIXYgfHwgJ0VzdGUgQ2FtcG8gZXMgcmVxdWVyaWRvJ10iCiAgICAgICAgICAgIHYtbW9kZWw9Im9mZXJ0YXMuaWR1c3VhcmlvIgogICAgICAgICAgICAgIDppdGVtcz0iYXJyYXlVc3VhcmlvcyIKICAgICAgICAgICAgOml0ZW0tdGV4dD0iJ25vbWJyZXMnIgogICAgICAgICAgICA6aXRlbS12YWx1ZT0iJ2lkJyI+PC92LWF1dG9jb21wbGV0ZT4tLT4KCiAgICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY3VzdG9tLWlucHV0LWZpbGUgY29sLW1kLTYgY29sLXNtLTYgY29sLXhzLTYgbWItMTAiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImZpbGUiIEBjaGFuZ2U9Ik9idGVuZXJJbWFnZW4iIGlkPSJmaWNoZXJvLXRhcmlmYXMiIGNsYXNzPSJpbnB1dC1maWxlIiB2YWx1ZT0iIiAgYWNjZXB0PSJpbWFnZS8qIi8+CiAgICAgICAgICAgICAgICBTdWJpciBJbWFnZW4uLi4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgIG1kPSI0IgogICAgICAgICAgICA+CgogICAgICAgICAgICA8IS0tTWFyY28gZGUgY2FyZ2EtLT4KICAgICAgICAgICAgPGRpdiBpZD0iaW1nYm9yZGVyIiA+CiAgICAgICAgICAgIDx2LWltZyB2LXNob3c9ImltZ3Nob3cgPT0gdHJ1ZSIgd2lkdGg9IjE0NSIgaGVpZ2h0PSIxNTUiIDpzcmM9ImltYWdlbiI+PC92LWltZz4KCiAgICAgICAgICAgIDx2LWltZyA6di1zaG93PSJpbWdzaG93ID09IGZhbHNlIiB3aWR0aD0iMTQ1IiBoZWlnaHQ9IjE1NSIgOnNyYz0iJy9JbWdPZmVydGFzLycrIG9mZXJ0YXMuaW1nIj48L3YtaW1nPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLUZpbiBNYXJjbyBkZSBjYXJnYS0tPgoKICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICA8di1jYXJkIGlkPSJjYXJkZm9ybTEiPgogICAgICAgICAgPHYtY2FyZC10aXRsZT48aDQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4Ij5JSS4gRGF0b3MgZGUgcmVxdWlzaXRvcyBkZSBvZmVydGFzPC9oND48L3YtY2FyZC10aXRsZT4KICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGU+CiAgICAgICAgPHYtcm93PgogICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBtZD0iMyIKICAgICAgICAgICAgPgogICAgICAgICAgICA8di1hdXRvY29tcGxldGUgbGFiZWw9IkfDqW5lcm8iCiAgICAgICAgICAgIHYtbW9kZWw9InJlcXVpc2l0b3NVcGQuZ2VuZXJvIgogICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgOml0ZW1zPSJnZW5lcm9zIgogICAgICAgICAgICA6aXRlbS10ZXh0PSInZ2VuZXJvJyIKICAgICAgICAgICAgOml0ZW0tdmFsdWU9IidnZW5lcm8nIj48L3YtYXV0b2NvbXBsZXRlPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgCiAgICAgICAgICA8di1yb3cganVzdGlmeT0ic3BhY2UtYXJvdW5kIj4KICAgICAgICAgICAgPHYtY29sCiAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgbWQ9IjgiCiAgICAgICAgICAgICAgc3R5bGU9IiBkaXNwbGF5OmZsZXg7bWFyZ2luOiAwIDEwcHg7IgogICAgICAgICAgICAgIAogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJzaG93RWRhZCIKICAgICAgICAgICAgICAgIGxhYmVsPSJSYW5nbyIKICAgICAgICAgICAgICAgIEBjbGljaz0iIXNob3dFZGFkIgogICAgICAgICAgICAgID48L3YtY2hlY2tib3g+CiAgICAgICAgICAgIAoKICAgICAgICAgIAogICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNsYXNzPSJtbC0yIgogICAgICAgICAgICB2LW1vZGVsPSJNaW5FZGFkIgogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgaGlkZS1kZXRhaWxzCiAgICAgICAgICAgIHNpbmdsZS1saW5lCiAgICAgICAgICAgIG1pbj0iMTQiCiAgICAgICAgICAgIGxhYmVsPSJFZGFkIE1pbmltYSAiCiAgICAgICAgICAgIHdpZHRoPSIyMCIKICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAvPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgY2xhc3M9Im1sLTQiCiAgICAgICAgICAgIDpkaXNhYmxlZD0ic2hvd0VkYWQgPT0gdHJ1ZSIKICAgICAgICAgICAgdi1tb2RlbD0iTWF4RWRhZCIKICAgICAgICAgICAgCiAgICAgICAgICAgIGhpZGUtZGV0YWlscwogICAgICAgICAgICBzaW5nbGUtbGluZQogICAgICAgICAgICBtYXg9IjUwIgogICAgICAgICAgICBsYWJlbD0iRWRhZCBNYXhpbWEiCiAgICAgICAgICAgIHdpZHRoPSIyMCIKICAgICAgICAgICAgdHlwZT0ibnVtYmVyIgogICAgICAgICAgICAvPgogICAgICAgICAgCiAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAgICAgICAgIDx2LWljb24gICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5FZGFkIG3DrW5pbWEgcGFyYSBvYnRlbmVyIGVsIGVtcGxlbyBvIHJhbmdvIGRlIGVkYWQ8L3NwYW4+CiAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICA8L3YtY29sPgoKICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgIDx2LXJvdyAganVzdGlmeT0ic3BhY2UtYXJvdW5kIj4KICAgICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgbWQ9IjQiCiAgICAgICAgICAgICAgPiAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8di1hdXRvY29tcGxldGUgbGFiZWw9Ik5pdmVsIEFjYWTDqW1pY28iCiAgICAgICAgICAgICAgdi1tb2RlbD0icmVxdWlzaXRvc1VwZC5uaXZlbF9hY2FkZW1pY28iCiAgICAgICAgICAgICAgOnJ1bGVzPSJbdiA9PiAhIXYgfHwgJ0VzdGUgQ2FtcG8gZXMgcmVxdWVyaWRvJ10iCiAgICAgICAgICAgICAgOml0ZW1zPSJuaXZlbF9hY2FkZW1pY28iCiAgICAgICAgICAgICAgOml0ZW0tdGV4dD0iJ25pdmVsJyIKICAgICAgICAgICAgICA6aXRlbS12YWx1ZT0iJ25pdmVsJyI+PC92LWF1dG9jb21wbGV0ZT4KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgIAoKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgbWQ9IjMiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWF1dG9jb21wbGV0ZSBsYWJlbD0iSG9yYXJpbyIKICAgICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgICB2LW1vZGVsPSJyZXF1aXNpdG9zVXBkLmhvcmFyaW8iCiAgICAgICAgICAgICAgOml0ZW1zPSJob3JhcmlvcyIKICAgICAgICAgICAgICA6aXRlbS10ZXh0PSInaG9yYXJpbyciCiAgICAgICAgICAgICAgOml0ZW0tdmFsdWU9Iidob3JhcmlvJyI+PC92LWF1dG9jb21wbGV0ZT4KICAgICAgICAgICAgICA8L3YtY29sPgoKICAgICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgbWQ9IjMiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LWF1dG9jb21wbGV0ZSBsYWJlbD0iTGljZW5jaWEgZGUgY29uZHVjaXIiCiAgICAgICAgICAgICAgdi1tb2RlbD0icmVxdWlzaXRvc1VwZC5saWNlbmNpYSIKICAgICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgICA6aXRlbXM9ImxpY2VuY2lhIgogICAgICAgICAgICAgIDppdGVtLXRleHQ9Iidlc3RhZG8nIgogICAgICAgICAgICAgIDppdGVtLXZhbHVlPSInZXN0YWRvJyI+PC92LWF1dG9jb21wbGV0ZT4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAKICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgIHNtPSIxMiIKICAgICAgICAgICAgICBjbGFzcz0iZC1mbGV4IG1iLTQiCiAgICAgICAgICAgICAgCiAgICAgICAgICAgID4gPHYtcm93IGp1c3RpZnk9InNwYWNlLWFyb3VuZCI+CiAgICAgICAgICAgCiAgICAgICAgICAgICAgPHYtY2hlY2tib3ggCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJyZXF1aXNpdG9zVXBkLmFtYmllbnRlIgogICAgICAgICAgICAgICAgbGFiZWw9IkJ1ZW4gQW1iaWVudGUgTGFib3JhbCIKICAgICAgICAgICAgICAgIHZhbHVlPSJCdWVuIEFtYmllbnRlIExhYm9yYWwiCiAgICAgICAgICAgICAgPjwvdi1jaGVja2JveD4KICAgICAgICAgICAgICA8di1jaGVja2JveCAKICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlcXVpc2l0b3NVcGQucHJlc3RhY2lvbmVzIgogICAgICAgICAgICAgICAgbGFiZWw9IlByZXN0YWNpb25lcyBkZSBMZXkiCiAgICAgICAgICAgICAgICB2YWx1ZT0iUHJlc3RhY2lvbmVzIGRlIExleSIKICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICB2LW1vZGVsPSJyZXF1aXNpdG9zVXBkLmNvbWljaW9uIgogICAgICAgICAgICAgICAgbGFiZWw9IkNvbWljaW9uZXMiCiAgICAgICAgICAgICAgICB2YWx1ZT0iQ29taWNpb25lcyIKICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIDx2LWNvbCAKICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTpmbGV4O21hcmdpbjogMCAxMHB4O21hcmdpbi10b3A6LTUwcHgiCiAgICAgICAgICAgICAgbWQ9IjEyIgogICAgICAgICAgICA+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgcm93cz0iMiIKICAgICAgICAgICAgICAgIEBrZXl1cD0iZXJyb3JzTm9tYnJlID0gW10iCiAgICAgICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZXM9ImVycm9yc05vbWJyZSIKICAgICAgICAgICAgICAgIHYtbW9kZWw9InJlcXVpc2l0b3NVcGQuY29ub2NpbWllbnRvIgogICAgICAgICAgICAgICAgbmFtZT0idHhhSGFiaWxpZGFkZXMiCiAgICAgICAgICAgICAgICA6cnVsZXM9Ilt2ID0+ICEhdiB8fCAnRXN0ZSBDYW1wbyBlcyByZXF1ZXJpZG8nXSIKICAgICAgICAgICAgICAgIGxhYmVsPSJDb25vY2ltaWVudG9zIgogICAgICAgICAgICAgICAgaGludD0iRGlnaXRhciBicmV2ZSBkZXNjcmlwY2lvbiBkZWwgZW1wbGVvIgogICAgICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgPHYtaWNvbiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPkNvbm9jaW1pZW50b3MgcmVxdWVyaWRvczwvc3Bhbj4KICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICA8L3YtY29sPgoKCiAgICAgICAgICAgICA8di1jb2wgCiAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6ZmxleDttYXJnaW46IDAgMTBweDttYXJnaW4tdG9wOi01MHB4IgogICAgICAgICAgICAgIG1kPSIxMiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgICByb3dzPSIyIgogICAgICAgICAgICAgICAgQGtleXVwPSJlcnJvcnNOb21icmUgPSBbXSIKICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz0iZXJyb3JzTm9tYnJlIgogICAgICAgICAgICAgICAgdi1tb2RlbD0icmVxdWlzaXRvc1VwZC5leHBlcmllbmNpYSIKICAgICAgICAgICAgICAgIDpydWxlcz0iW3YgPT4gISF2IHx8ICdFc3RlIENhbXBvIGVzIHJlcXVlcmlkbyddIgogICAgICAgICAgICAgICAgbGFiZWw9IkV4cGVyaWVuY2lhIExhYm9yYWwiCiAgICAgICAgICAgICAgICBoaW50PSJEaWdpdGFyIHJlcXVpc2l0b3MgYSBjdW1wbGlyIGRlIGxhIG9mZXJ0YSIKICAgICAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAgICAgICAgIDx2LWljb24gICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5FeHBlcmllbmNpYSByZXF1ZXJpZGE8L3NwYW4+CiAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgPC92LWNvbD4KCiAgICAgICAgICAgIAoKICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICA8L3YtY2FyZD4KICAgICAgICA8L3YtY29udGFpbmVyPgogICAgCiAgICAgICAgICA8L3YtZm9ybT4KICAgICAgICAgICA8di1jb2wKICAgICAgICAgICAgY29sPSIxMiIKICAgICAgICAgICAgbWQ9IjEyIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICBpZD0iYnRub2ZlcnRhIgogICAgICAgICAgICAgICAgY29sb3I9InN1Y2Nlc3MiCiAgICAgICAgICAgICAgICBAY2xpY2s9IlVwZG9mZXJ0YXMoKSIgPkFjdHVhbGl6YXIgT2ZlcnRhPC92LWJ0bj4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgPCEtLSoqRmluIE1vZGFsIGRlIEFjdHVhbGl6YWNpb24qKi0tPgogICAgICAKCiAgICAgICAgCiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdGVtcGxhdGU+CiAgICA8L3YtZGlhbG9nPiAgICAgCiAgPC9zZWN0aW9uPgo8L3NlY3Rpb24+ICAK"},null]}
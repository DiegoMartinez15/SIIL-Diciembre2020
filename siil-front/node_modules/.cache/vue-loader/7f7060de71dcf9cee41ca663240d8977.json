{"remainingRequest":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\src\\components\\FormularioPerfil.vue?vue&type=template&id=b98b30e4&","dependencies":[{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\src\\components\\FormularioPerfil.vue","mtime":1618023807124},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610378888681},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610378888681},{"path":"c:\\wamp64\\www\\SIIL-Diciembre2020-Trabajando\\siil-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiICA+CiAgICAgPHYtYWxlcnQKICAgICAgdi1zaG93PSJhcnJheUFzcGlyYW50ZS5mb3JtdWxhcmlvX3BlcmZpbD09PSdTaSciCiAgICAgIGJvcmRlcj0idG9wIgogICAgICBjb2xvcmVkLWJvcmRlciAKICAgICAgdHlwZT0iaW5mbyIKICAgICAgZWxldmF0aW9uPSIyIgogICAgPgogICAgIFlhIGhhcyBjb21wbGV0YWRvIGVzdGUgZm9ybXVsYXJpbyxwZXJvIHB1ZWRlcyBzZWd1aXIgYWN0dWFsaXphciB0dSBpbmZvcm1hY2lvbi4gWSBkZSBxdWUgc2VydmlyYSBhY3R1YWxpemFyIHR1IGluZm9ybWFjaW9uPyBQdWVzIHNpIGNhZGEgdmV6IHZhcyBhdW1lbnRhbmRvIHR1cyBjb25vY2ltaWVudG9zIHBvZHJhcyBzZXIgcmVjb21lbmRhZG8geSBhY2VwdGFkbyBjb24gbXVjaGEgbWFzIGZhY2lsaWRhZCBwb3IgdHVzIGNvbXBldGVuY2lhcyBhZHF1aXJpZGFzCiAgICA8L3YtYWxlcnQ+CiAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICA8ZGl2IGNsYXNzPSJtZC1sYXlvdXQtaXRlbSBtZC1tZWRpdW0tc2l6ZS0xMDAgbWQteHNtYWxsLXNpeGUtMTAwIG1kLXNpemUtMTAwIj4KICAgICAgPHYtb3ZlcmxheSA6dmFsdWU9ImxvYWRlciIgOnotaW5kZXg9Iic5OTk5OTk5OSciPgogICAgICAgIDx2LXByb2dyZXNzLWNpcmN1bGFyIGluZGV0ZXJtaW5hdGUgc2l6ZT0iODAiIGNvbG9yPSIjODE0NjkwIj48L3YtcHJvZ3Jlc3MtY2lyY3VsYXI+CiAgICAgIDwvdi1vdmVybGF5PgogICAgICA8di1jYXJkIHYtc2hvdz0iYXJyYXlBc3BpcmFudGUuZm9ybXVsYXJpb19wZXJmaWw9PT0nU2knIj4KICAgICAgICA8di1jYXJkLXRpdGxlPgogICAgICAgICAgRGF0b3MgR2VuZXJhbGVzCiAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgPHYtZGF0YS10YWJsZQogICAgICAgICAgOmhlYWRlcnM9IkVuY2FiZXphZG8iCiAgICAgICAgICA6aXRlbXM9ImFycmF5Rm9ybXVsYXJpbyIKICAgICAgICAgIGNsYXNzPSJlbGV2YXRpb24tMSIKICAgICAgICAgIG11bHRpLXNvcnQKICAgICAgICAgIGhpZGUtZGVmYXVsdC1mb290ZXIKICAgICAgICA+CiAgICAgICAgICA8IS0tIFRlbXBsZWF0ZSBwYXJhIGZvcm0gbW9kYWwgcGFyYSBhZ3JlZ2FyIG8gYWN0dWFsaXphciBwcm9kdWN0b3MtLT4KICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dG9wPgogICAgICAgICAgICA8di10b29sYmFyIGZsYXQgY29sb3I9IndoaXRlIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWdyb3ctMSI+PC9kaXY+CiAgICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9Im1vZGFsRm9ybSIgcGVyc2lzdGVudCBtYXgtd2lkdGg9IjEwMDBweCI+CiAgICAgICAgICAgICAgICA8di1jYXJkPgogICAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJoZWFkbGluZSB3aGl0ZSIgcHJpbWFyeS10aXRsZXM+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImhlYWRsaW5lIj5BY3R1YWxpemFjaW9uIGRlIERhdG9zIGRlbCBFZ3Jlc2Fkbzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgICA8di1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICA8di1mb3JtIHJlZj0iZm9ybVBlcmZpbCIgdi1tb2RlbD0idmFsaWQiIDpsYXp5LXZhbGlkYXRpb249InRydWUiPgogICAgICAgICAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgPHRoZWFkIHN0eWxlPSJmb250LXNpemU6MjVweCIgY29sb3I9IiMjMjAyMDJmIj5JLkRhdG9zIFBlcnNvbmFsZXM8L3RoZWFkPgogICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDwhLS12LXJvdyBwYXJ0ZSAxLS0+IAogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMCIgbWQ9IjAiID4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgIHYtc2hvdz0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5pZCIKICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uaWQiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8IS0tZXN0YWRvIGNpdmlsLS0+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIyIj4KICAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZXN0YWRvX2NpdmlsIgogICAgICAgICAgICAgICAgICAgIDppdGVtcz0iZXN0YWRvcyIKICAgICAgICAgICAgICAgICAgICBpdGVtLXRleHQ9IiIKICAgICAgICAgICAgICAgICAgICBpdGVtLXZhbHVlPSIiCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkVzdGFkbyBDaXZpbCIKICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8IS0tTnVtZXJvIGRlIHRlbGVmb25vLS0+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIiBzdHlsZT0iIGRpc3BsYXk6ZmxleDsiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICBMYWJlbD0iTsO6bWVybyBkZSB0ZWxlZm9ubyIKICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYXJyYXlBc3BpcmFudGUuY2VsdWxhciIKICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVsIG7Dum1lcm8gcXVlIHB1ZWRlcyB2ZXIgYSBsYSBpenF1aWVyZGEgZXMgdHUgbsO6bWVybyBkZQogICAgICAgICAgICAgICAgICAgICAgICAgICB0ZWxlZm9ubyBxdWUgdGVuZW1vcyBwYXJhIGNvbnRhY3RhcnRlLCBzaSBoYXMgY2FtYmlhZG8gZGUgbsO6bWVybyB0ZWxlZm9uaWNvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9yIGZhdm9yIGluZ3Jlc2EgdHUgbnVldm8gbsO6bWVybyBlbiBlbCByZWN1YWRybyBkZSA8c3Ryb25nPk51ZXZvIG7Dum1lcm88L3N0cm9uZz4gKHNpIG5vIGhhcyBjYW1iaWFkbyBkZWJlcyBkZWphcmxvIGVuIGJsYW5jbyk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iOCIKICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uY2VsdWxhcjIiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmNlbHVsYXIyIgogICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPSJwaG9uZVJ1bGVzIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik51ZXZvIG7Dum1lcm8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8IS0tUGFzYXBvcnRlLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjkiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5wYXNhcG9ydGUiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLnBhc2Fwb3J0ZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQYXNhcG9ydGUiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaSB0aWVuZXMgPHN0cm9uZz5QYXNhcG9ydGU8L3N0cm9uZz4gZGViZXMgZXNjcmliaXIgZWwgbsO6bWVybyBkZSByZWZlcmVuY2lhPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMTQiCiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmxpY2VuY2lhX2NvbmR1Y2lyIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5saWNlbmNpYV9jb25kdWNpciIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJMaWNlbmNpYSBkZSBjb25kdWNpciIKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0icGhvbmVSdWxlcyIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlNpIHRpZW5lcyA8c3Ryb25nPkxpY2VuY2lhIGRlIGNvbmR1Y2lyPC9zdHJvbmc+IGRlYmVzIGVzY3JpYmlyIGVsIG7Dum1lcm8gZGUgcmVmZXJlbmNpYTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICA8IS0tTlVQLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMTIiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5udXAiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm51cCIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJOdXAiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPsK/UXXDqSBlcyBlbCBOVVA/IEVzIGVsIE7Dum1lcm8gw5puaWNvIFByZXZpc2lvbmFsIHF1ZSBpZGVudGlmaWNhIGEgY2FkYSBhZmlsaWFkbwogICAgICAgICAgICAgICAgICAgICAgICAgICB5IGVzIGFzaWduYWRvIHBvciBsYSBTdXBlcmludGVuZGVuY2lhIGRlbCBTaXN0ZW1hIEZpbmFuY2llcm8uIFB1ZWRlIGVuY29udHJhcnNlIAogICAgICAgICAgICAgICAgICAgICAgICAgICBmw6FjaWxtZW50ZSBlbiB0dSBDYXJuw6kgZGUgYWZpbGlhZG8gYSBDT05GSUEgeSBhdW5xdWUgdGUgdHJhc2xhZGVzIGEgb3RyYSBBRlAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dSBOVVAgc2VndWlyw6Egc2llbmRvIGVsIG1pc21vPC9zcGFuPiAKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+LiBTaSB0aWVuZXMgPHN0cm9uZz5Ow7ptZXJvIMO6bmljbyBwcmV2aXNpb25hbDwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8IS0tbml2ZWwgZGUgSWRpb21hLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5uaXZlbF9pZGlvbWEiCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5uaXZlbF9pZGlvbWEiCiAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJpdGVtcyIKICAgICAgICAgICAgICAgICAgICBsYWJlbD0iTml2ZWwgZGUgc2VndW5kbyBpZGlvbWEiCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8dGhlYWQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4IiBjb2xvcj0iIyMyMDIwMmYiPklJLkVzdGFkbyBEZSBTYWx1ZDwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8IS0tdi1yb3cgcGFydGUgMi0tPgogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPCEtLUVuZmVybWVtZGFkIENyb25pY2EtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uZW5mZXJtZWRhZF9tZW5jaW9uIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX21lbmNpb24iCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlBhZGVjZSBhbGd1bmEgRW5mZXJtZWRhZCBDcm9uaWNhPyIKICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgICAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4gCiAgICAgICAgICAgICAgICAgICA8IS0tc2k/RW5mZXJtZW1kYWQgQ3JvbmljYS0tPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX2Nyb25pY2EiCiAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX21lbmNpb249PT0nTm8nIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5lbmZlcm1lZGFkX2Nyb25pY2EiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iU2k/IE1lbmNpb25hciIKICAgICAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIDwhLS1NZWRpY2FtZW50b3MtLT4KICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm1lZGljYW1lbnRvX3Blcm1hIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19wZXJtYSIKICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJ5ZXNubyIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJOZWNlc2l0YSBtZWRpY2FtZW50b3MgcGVybWFuZW50ZXM/IgogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICA8IS0tU2k/TWVkaWNhbWVudG9zLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjYiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMjUwIgogICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm1lZGljYW1lbnRvX21lbmNpb24iCiAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJmb3JtdWxhcmlvLm1lZGljYW1lbnRvX3Blcm1hPT09J05vJyIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubWVkaWNhbWVudG9fbWVuY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJTaT8gTWVuY2lvbmFyIgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPCEtLURpc2NhcGFjaWRhZC0tPgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmRpc2NhcGFjaWRhZCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZGlzY2FwYWNpZGFkIgogICAgICAgICAgICAgICAgICAgICAgOml0ZW1zPSJ5ZXNubyIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQb3NlZSBhbGfDum4gdGlwbyBkZSBkaXNjYXBhY2lkYWQ/IgogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgPHRoZWFkIHN0eWxlPSJmb250LXNpemU6MjVweCIgY29sb3I9IiMjMjAyMDJmIj5JSUkuSW5mb3JtYWNpb24gQWNhZMOpbWljYTwvdGhlYWQ+CiAgICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8IS0tdi1yb3cgcGFydGUgMy0tPgogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8IS0tbml2ZWwgYWNhZGVtaWNvLS0+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8IS0tQ3Vyc29zLS0+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjEyIiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5jdXJzb3NfaW5mb3JtYWNpb24iCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5jdXJzb3NfaW5mb3JtYWNpb24iCiAgICAgICAgICAgICAgICAgICAgbmFtZT0idHhhQ3Vyc28iCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkN1cnNvcyBkZSBmb3JtYWNpb24iCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaGludD0iRXNjcmliYSBsb3MgY3Vyc29zIgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+Q3Vyc29zIGRlIGZvcm1hY2lvbjwvc3Ryb25nPiBwdWVkZSBzZXI6IDxzdHJvbmc+Q3Vyc29zIGRlIEV4Y2VsLCBXb3JkLCBQb3dlclBvaW50LCBNYXJrZXRpbmc8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwhLS1PZmljaW9zLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiIGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLm9maWNpb3NfcmVhbGl6YXIiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm9maWNpb3NfcmVhbGl6YXIiCiAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJ0eGFPZmljaW8iCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD0iT2ZpY2lvcyBxdWUgcHVlZGUgcGVhbGl6YXIiCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIG9maWNpb3MiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+T2ZpY2lvczwvc3Ryb25nPiBwdWVkZSBzZXI6IDxzdHJvbmc+Q29jaW5lcm8sIE1lY8OhbmljbywgUmVwYXJ0aWRvciwgZXRjLjwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwhLS1JZGVhIE5lZ29naW8tLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSIyIj4KICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uaWRlYV9uZWdvY2lvIgogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5pZGVhX25lZ29jaW8iCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IklkZWEgZGUgbmVnb2Npbz8iCiAgICAgICAgICAgICAgICAgICAgPjwvdi1zZWxlY3Q+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4IiBjb2xvcj0iIyMyMDIwMmYiPklWLkV4cGVyaWVuY2lhIExhYm9yYWw8L3RoZWFkPgogICAgICAgICAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8IS0tdi1yb3cgcGFydGUgNC0tPgogICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgPCEtLUV4cGVyaWVuY2lhIGxhYm9yYWwtLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby5leHBlcmVjaWFfbGFib3JhbCIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZXhwZXJlY2lhX2xhYm9yYWwiCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IlBvc2VlIGV4cGVyaWVuY2lhIGxhYm9yYWw/IgogICAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPCEtLXBlcmlvZG8gZW1wbGVvLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNCIgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMDAiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZm9ybXVsYXJpby51bHRpbW9fcGVyaW9kb190cmFiYWpvIgogICAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZXhwZXJlY2lhX2xhYm9yYWw9PT0nTm8nIgogICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLnVsdGltb19wZXJpb2RvX3RyYWJham8iCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQZXJpb2RvIGRlIMO6bHRpbW8gZW1wbGVvIgogICAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlVuIGVqZW1wbG8gZGUgPHN0cm9uZz5QZXJpb2RvIGRlIGVtcGxlbzwvc3Ryb25nPiBwdWVkZSBzZXI6IDxzdHJvbmc+RW5lcm8gZGUgMjAxNyBoYXN0YSBBZ29zdG8gZGUgMjAyMDwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8IS0tY2FyZ28tLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjIwMCIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJmb3JtdWxhcmlvLmNhcmdvX2Rlc2VtcGVuYWRvIgogICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPSJmb3JtdWxhcmlvLmV4cGVyZWNpYV9sYWJvcmFsPT09J05vJyIKICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5jYXJnb19kZXNlbXBlbmFkbyIKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkNhcmdvIGRlc2VtcGXDsWFkbyIKICAgICAgICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICA8IS0taGFiaWxpZGFkZXMtLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uaGFiaWxpZGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaGFiaWxpZGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YUhhYmlsaWRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkhhYmlsaWRhZGVzLCBjYXJhY3RlcmlzdGljYXMgbyBhY3RpdmlkYWRlcyBwZXJzb25hbGVzIGVuIHF1ZSBzZSBkZXN0YWNhIG8gaGFjZSBiaWVuIgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICBoaW50PSJFc2NyaWJhIHN1cyBoYWJpbGlkYWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICA8IS0tZGlmaWN1bHRhZGVzLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aD0iMjUwIgogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uZGlmaWN1bHRhZGVzX3BlcnNvbmFsZXMiCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmRpZmljdWx0YWRlc19wZXJzb25hbGVzIgogICAgICAgICAgICAgICAgICAgICAgbmFtZT0idHhhRGlmaWN1bHRhZGVzIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IkRpZmljdWx0YWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMgcGVyc29uYWwgcXVlIGRlYmUgbWVqb3JhciBvIGFwcmVuZGVyIgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICBoaW50PSJFc2NyaWJhIHN1cyBkaWZpY3VsdGFkZXMsIGNhcmFjdGVyaXN0aWNhcyBvIGFjdGl2aWRhZGVzIgogICAgICAgICAgICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIDwhLS1kaXNwb25hYmlsaWRhZCBlbXBsZW8tLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8uZGlzcG9uaWJpbGlkYWRfaG9yYXJpYSIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZGlzcG9uaWJpbGlkYWRfaG9yYXJpYSIKICAgICAgICAgICAgICAgICAgICAgIDppdGVtcz0idGltZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJEaXNwb25pYmlsaWRhZCBob3JhcmlhIHBhcmEgZW1wbGVvIgogICAgICAgICAgICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPCEtLW90cmFzIG9ic2VydmFjaW9uZXMtLT4KICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgICAgICAgICAgdmFsdWU9ImZvcm11bGFyaW8ub3RyYV9vYnNlcnZhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ub3RyYV9vYnNlcnZhY2lvbiIKICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InR4YU90cmFzIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9Ik90cmFzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICAgICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InBpZV9pbmZvIiA+QW50ZXMgZGUgZW52aWFyIHR1IGluZm9ybWFjacOzbiByZXZpc2EgcXVlIHRvZG8gZXN0ZSBjb3JyZWN0byA8L2gzPgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgICAgICAgPC92LWZvcm0+CiAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtZ3Jvdy0xIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9InJlZCBkYXJrZW4tMyIgdGV4dCBAY2xpY2s9ImNlcnJhck1vZGFsIj5DZXJyYXI8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9InN1Y2Nlc3MiCiAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9IiF2YWxpZCIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0idXBkYXRlRm9ybSgpIgogICAgICAgICAgICAgICAgICAgID5FbnZpYXIgbWkgaW5mb3JtYWNpw7NuIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8L3YtdG9vbGJhcj4KPC90ZW1wbGF0ZT4KICAgICAgICAgIDwhLS1UZW1wbGF0ZSBwYXJhIGxhIGNvbHVtbmEgZGUgYWNjaW9uZXMgLS0+CiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Oml0ZW0uYWN0aW9uPSJ7aXRlbX0iPgogICAgICAgICAgICA8di10b29sdGlwIHRvcD4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ie29ufSI+CiAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbj0iOCIKICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9Iml0ZW0uaWQ8MCIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2hvd0VkaXRhckZvcm0oaXRlbSkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIEFjdHVhbGl6YXIgbWkgaW5mb3JtYWNpw7NuCiAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+IAogICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgIDwvdi1jYXJkPgogICAgPC9kaXY+CjwhLS1GT1JNVUxBUklPIERFIElOR1JFU08gREUgREFUT1MtLT4KICA8di1mb3JtIHYtbW9kZWw9InZhbGlkIiByZWY9ImZvcm1QZXJmaWwiIDpsYXp5LXZhbGlkYXRpb249InRydWUiICB2LXNob3c9ImFycmF5QXNwaXJhbnRlLmZvcm11bGFyaW9fcGVyZmlsPT09J05vJyI+CiAgICAKICAgIDx2LWNvbnRhaW5lcj4KICAgICAgPGgzIHN0eWxlPSJmb250LXNpemU6NDBweDt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojMjAyMDJmOyI+UmVnaXN0cm8gZGUgUGVyZmlsIE9jdXBhY2lvbmFsIGRlIEdyYWR1YWRvPC9oMz4KICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjIzIwMjAyZiI+SS5EYXRvcyBQZXJzb25hbGVzPC90aGVhZD4KICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPCEtLXYtcm93IHBhcnRlIDEtLT4KICAgICAgPHYtcm93PgogICAgICAgICA8IS0tbm9tYnJlLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMyI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICBsYWJlbD0iTm9tYnJlcyIKICAgICAgICAgICAgdi1tb2RlbD0iYXJyYXlBc3BpcmFudGUubm9tYnJlcyIKICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1BcGVsbGlkby0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgbGFiZWw9IkFwZWxsaWRvcyIKICAgICAgICAgICAgdi1tb2RlbD0iYXJyYXlBc3BpcmFudGUuYXBlbGxpZG9zIgogICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLWRhdGVwaWNrZXIgZGUgbmFjaW1pZW50by0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgbGFiZWw9IkZlY2hhIGRlIG5hY2ltaWVudG8iCiAgICAgICAgICAgIHYtbW9kZWw9ImFycmF5QXNwaXJhbnRlLmZlY2hhX25hYyIKICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICA8IS0tbHVnYXIgZGUgbmFjaW1pZW50by0tPgogICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubHVnYXJfbmFjIgogICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgICBsYWJlbD0iTHVnYXIgZGUgbmFjaW1pZW50byIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1EaXJlY2Npb24tLT4KICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICBsYWJlbD0iRGlyZWNjacOzbiIKICAgICAgICAgICAgdi1tb2RlbD0iYXJyYXlBc3BpcmFudGUuZGlyZWNjaW9uIgogICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLWVzdGFkbyBjaXZpbC0tPgogICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIyIj4KICAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgICAKICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmVzdGFkb19jaXZpbCIKICAgICAgICAgIDppdGVtcz0iZXN0YWRvcyIKICAgICAgICAgIGxhYmVsPSJFc3RhZG8gQ2l2aWwiCiAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1OdW1lcm8gZGUgdGVsZWZvbm8tLT4KICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiIgc3R5bGU9IiBkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgIGxhYmVsPSJOw7ptZXJvIGRlIHRlbMOpZm9ubyIKICAgICAgICAgICB2LW1vZGVsPSJhcnJheUFzcGlyYW50ZS5jZWx1bGFyIgogICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJtYXJnaW4tbGVmdDoyMHB4OyIKICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIGluZm8KICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHNwYW4+RWwgbsO6bWVybyBxdWUgcHVlZGVzIHZlciBhIGxhIGl6cXVpZXJkYSBlcyB0dSBuw7ptZXJvIGRlCiAgICAgICAgICAgICAgICAgdGVsZWZvbm8gcXVlIHRlbmVtb3MgcGFyYSBjb250YWN0YXJ0ZSwgc2kgaGFzIGNhbWJpYWRvIGRlIG7Dum1lcm8gdGVsZWZvbmljby4KICAgICAgICAgICAgICAgICAgUG9yIGZhdm9yIGluZ3Jlc2EgdHUgbnVldm8gbsO6bWVybyBlbiBlbCByZWN1YWRybyBkZSA8c3Ryb25nPk51ZXZvIG7Dum1lcm88L3N0cm9uZz4gKHNpIG5vIGhhcyBjYW1iaWFkbyBkZWJlcyBkZWphcmxvIGVuIGJsYW5jbyk8L3NwYW4+CiAgICAgICAgICAgIDwvdi10b29sdGlwPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSI4IgogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmNlbHVsYXIyIgogICAgICAgICAgICA6cnVsZXM9InBob25lUnVsZXMiCiAgICAgICAgICAgIGxhYmVsPSJOdWV2byBuw7ptZXJvIgogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLURVSS0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgbGFiZWw9IkRVSSIKICAgICAgICAgICAgdi1tb2RlbD0iYXJyYXlBc3BpcmFudGUuZHVpIgogICAgICAgICAgICBkaXNhYmxlZAogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgPCEtLU5JVC0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjE0IgogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm5pdCIKICAgICAgICAgICAgOnJ1bGVzPSJuaXQiCiAgICAgICAgICAgIGxhYmVsPSJOSVQiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1QYXNhcG9ydGUtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIyIiBzdHlsZT0iIGRpc3BsYXk6ZmxleDsiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjkiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ucGFzYXBvcnRlIgogICAgICAgICAgICBsYWJlbD0iUGFzYXBvcnRlIgogICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgIDx2LXRvb2x0aXAgYm90dG9tID4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSIgPgogICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICBzdHlsZT0ibWFyZ2luLWxlZnQ6MjBweDsiCiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPlNpIHRpZW5lcyA8c3Ryb25nPlBhc2Fwb3J0ZTwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMyIgc3R5bGU9IiBkaXNwbGF5OmZsZXg7Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgIDpydWxlcz0icGhvbmVSdWxlcyIKICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iMTQiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubGljZW5jaWFfY29uZHVjaXIiCiAgICAgICAgICAgIGxhYmVsPSJMaWNlbmNpYSBkZSBjb25kdWNpciIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5TaSB0aWVuZXMgPHN0cm9uZz5MaWNlbmNpYSBkZSBjb25kdWNpcjwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPCEtLU5VUC0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiIHN0eWxlPSIgZGlzcGxheTpmbGV4OyI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIxMiIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5udXAiCiAgICAgICAgICAgIGxhYmVsPSJOdXAiCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj7Cv1F1w6kgZXMgZWwgTlVQPyBFcyBlbCBOw7ptZXJvIMOabmljbyBQcmV2aXNpb25hbCBxdWUgaWRlbnRpZmljYSBhIGNhZGEgYWZpbGlhZG8KICAgICAgICAgICAgICAgICB5IGVzIGFzaWduYWRvIHBvciBsYSBTdXBlcmludGVuZGVuY2lhIGRlbCBTaXN0ZW1hIEZpbmFuY2llcm8uIFB1ZWRlIGVuY29udHJhcnNlIAogICAgICAgICAgICAgICAgIGbDoWNpbG1lbnRlIGVuIHR1IENhcm7DqSBkZSBhZmlsaWFkbyBhIENPTkZJQSB5IGF1bnF1ZSB0ZSB0cmFzbGFkZXMgYSBvdHJhIEFGUCwKICAgICAgICAgICAgICAgICAgdHUgTlVQIHNlZ3VpcsOhIHNpZW5kbyBlbCBtaXNtbzwvc3Bhbj4gCiAgICAgICAgICAgICAgPHNwYW4+LiBTaSB0aWVuZXMgPHN0cm9uZz5Ow7ptZXJvIMO6bmljbyBwcmV2aXNpb25hbDwvc3Ryb25nPiBkZWJlcyBlc2NyaWJpciBlbCBuw7ptZXJvIGRlIHJlZmVyZW5jaWE8L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgPC92LWNvbD4KICAgICAgICAgPCEtLU5hY2lvbmFsaWRhZGQtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5uYWNpb25hbGlkYWQiCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICAgIGxhYmVsPSJOYWNpb25hbGlkYWQiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tMiBJZGlvbWEtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgIDx2LWF1dG9jb21wbGV0ZQogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRzZWd1bmRvX2lkaW9tYSIKICAgICAgICAgICAgOml0ZW1zID0gImFycmF5SWRpb21hIgogICAgICAgICAgICBsYWJlbD0iU2VndW5kbyBpZGlvbWEiCiAgICAgICAgICAgIGl0ZW0tdGV4dD0ibm9tYnJlIgogICAgICAgICAgICBpdGVtLXZhbHVlPSJpZCIKICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgIDptZW51LXByb3BzPSJ7IGNsb3NlT25DbGljazogdHJ1ZSB9IgogICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICA6cnVsZXM9ImNhbXBvIgogICAgICAgICAgPjwvdi1hdXRvY29tcGxldGU+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tbml2ZWwgZGUgSWRpb21hLS0+CiAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXgiIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgCiAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLm5pdmVsX2lkaW9tYSIKICAgICAgICAgIDppdGVtcz0iaXRlbXMiCiAgICAgICAgICBsYWJlbD0iTml2ZWwgZGUgc2VndW5kbyBpZGlvbWEiCiAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICA8L3Ytcm93PgogICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgIDx0aGVhZCBzdHlsZT0iZm9udC1zaXplOjI1cHgiIGNvbG9yPSIjMjAyMDJmIj5JSS5Fc3RhZG8gRGUgU2FsdWQ8L3RoZWFkPgogICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgIDwhLS12LXJvdyBwYXJ0ZSAyLS0+CiAgICAgIDx2LXJvdz4KICAgICAgPCEtLUVuZmVybWVtZGFkIENyb25pY2EtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZW5mZXJtZWRhZF9tZW5jaW9uIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUGFkZWNlIGFsZ3VuYSBFbmZlcm1lZGFkIENyb25pY2E/IgogICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgIDwhLS1zaT9FbmZlcm1lbWRhZCBDcm9uaWNhLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgOmRpc2FibGVkPSJmb3JtdWxhcmlvLmVuZmVybWVkYWRfbWVuY2lvbj09PSdObyciCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZW5mZXJtZWRhZF9jcm9uaWNhIgogICAgICAgICAgICBsYWJlbD0iU2k/IE1lbmNpb25hciIKICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1NZWRpY2FtZW50b3MtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubWVkaWNhbWVudG9fcGVybWEiCiAgICAgICAgICAgOml0ZW1zPSJ5ZXNubyIKICAgICAgICAgICAgbGFiZWw9Ik5lY2VzaXRhIG1lZGljYW1lbnRvcyBwZXJtYW5lbnRlcz8iCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICAgICA8IS0tU2k/TWVkaWNhbWVudG9zLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNiI+CiAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICBjb3VudGVyCiAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5tZWRpY2FtZW50b19wZXJtYT09PSdObyciCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubWVkaWNhbWVudG9fbWVuY2lvbiIKICAgICAgICAgICAgbGFiZWw9IlNpPyBNZW5jaW9uYXIiCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tRGlzY2FwYWNpZGFkLS0+CiAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZGlzY2FwYWNpZGFkIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUG9zZWUgYWxnw7puIHRpcG8gZGUgZGlzY2FwYWNpZGFkPyIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgIDwvdi1yb3c+CiAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPHRoZWFkIHN0eWxlPSJmb250LXNpemU6MjVweCIgY29sb3I9IiMjMjAyMDJmIj5JSUkuSW5mb3JtYWNpb24gQWNhZMOpbWljYTwvdGhlYWQ+CiAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPCEtLXYtcm93IHBhcnRlIDMtLT4KICAgICAgPHYtcm93PgogICAgICAgIDwhLS1uaXZlbCBhY2FkZW1pY28tLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8ubml2ZWxfYWNhZGVtaWNvIgogICAgICAgICAgICA6aXRlbXM9Im5pdmVsIgogICAgICAgICAgICBsYWJlbD0iTml2ZWwgYWNhZMOpbWljbyIKICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgOnJ1bGVzPSJjYW1wbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgCiAgICAgICAgICAgPCEtLVByYWN0aWNhIFByby0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiPgogICAgICAgIDx2LWF1dG9jb21wbGV0ZQogICAgICAgICAKICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRfY2FycmVyYSIKICAgICAgICAgIDppdGVtcz0iYXJyYXlDYXJyZXJhIgogICAgICAgICAgbGFiZWw9IkVzcGVjaWFsaWRhZCIKICAgICAgICAgIGl0ZW0tdGV4dD0ibm9tYnJlIgogICAgICAgICAgaXRlbS12YWx1ZT0iaWQiCiAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgIDptZW51LXByb3BzPSJ7IGNsb3NlT25DbGljazogdHJ1ZSB9IgogICAgICAgID48L3YtYXV0b2NvbXBsZXRlPgogICAgICAgIDwvdi1jb2w+CiAgICAgICAgIDwhLS1pbnN0aXR1Y2lvbi0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjMiPgogICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5pbnN0aXR1Y2lvbl9mb3JtYWRvcmEiCiAgICAgICAgICAgIGxhYmVsPSJJbnN0aXR1Y2lvbiBGb3JtYWRvcmEiCiAgICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgICAgIDpydWxlcz0iY2FtcG8iCiAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgPC92LWNvbD4KICAgICAgICA8IS0tR3JhZHVhY2lvbi0tPgogICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjIiPgogICAgICAgICAgPHYtc2VsZWN0CiAgICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRfYW5pb19ncmFkdWFjaW9uIgogICAgICAgICAgICA6aXRlbXMgPSAiYXJyYXlBbmlvcyIKICAgICAgICAgICAgaXRlbS10ZXh0PSJhbmlvIgogICAgICAgICAgICBpdGVtLXZhbHVlPSJpZCIKICAgICAgICAgICAgY2xlYXJhYmxlCiAgICAgICAgICAgIDptZW51LXByb3BzPSJ7IGNsb3NlT25DbGljazogdHJ1ZSB9IgogICAgICAgICAgICBsYWJlbD0iQcOxbyBkZSBncmFkdWFjacOzbj8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICA8L3YtY29sPgogICAgICAgIDwhLS1DdXJzb3MtLT4KICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiIgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgIG1heGxlbmd0aD0iMjUwIgogICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5jdXJzb3NfaW5mb3JtYWNpb24iCiAgICAgICAgICBuYW1lPSJ0eGFDdXJzbyIKICAgICAgICAgIGxhYmVsPSJDdXJzb3MgZGUgZm9ybWFjaW9uIgogICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgbG9zIGN1cnNvcyIKICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBkYXJrCiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBpbmZvCiAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDxzcGFuPlVuIGVqZW1wbG8gZGUgPHN0cm9uZz5DdXJzb3MgZGUgZm9ybWFjaW9uPC9zdHJvbmc+IHB1ZWRlIHNlcjogPHN0cm9uZz5DdXJzb3MgZGUgRXhjZWwsIFdvcmQsIFBvd2VyUG9pbnQsIE1hcmtldGluZzwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgCiAgICAgICAgICA8IS0tT2ZpY2lvcy0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiIGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5vZmljaW9zX3JlYWxpemFyIgogICAgICAgICAgICBuYW1lPSJ0eGFPZmljaW8iCiAgICAgICAgICAgIGxhYmVsPSJPZmljaW9zIHF1ZSBwdWVkZSByZWFsaXphciIKICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgb2ZpY2lvcyIKICAgICAgICAgID48L3YtdGV4dGFyZWE+CiAgICAgICAgICAgPHYtdG9vbHRpcCBib3R0b20gPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9IiA+CiAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+T2ZpY2lvczwvc3Ryb25nPiBwdWVkZSBzZXI6IDxzdHJvbmc+Q29jaW5lcm8sIE1lY8OhbmljbywgUmVwYXJ0aWRvciwgZXRjLjwvc3Ryb25nPjwvc3Bhbj4KICAgICAgICAgICAgICA8L3YtdG9vbHRpcD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAKICAgICAgICAgIDwhLS1Gb3JtYWNpb24gZW1wcmUtLT4KICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjQgIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uZm9ybWFjaW9uX2VtcHJlbmRlIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iRm9ybWFjaW9uIGRlIGVtcHJlbmRpbWllbnRvPyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1pbnN0aXR1Y2lvbiBlbXByZW5kZS0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgCiAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5mb3JtYWNpb25fZW1wcmVuZGU9PT0nTm8nIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaW5zdGl0dXRvX2Zvcm1hZG9yX2VtcHJlZGUiCiAgICAgICAgICAgICAgbGFiZWw9Ikluc3RpdHVjaW9uIGZvcm1hZG9yYSBkZSBlbXByZW5kaW1pZW50byIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1hbmlvIGRlIGZvcm1hY2lvbi0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMiI+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZm9ybWFjaW9uX2VtcHJlbmRlPT09J05vJyIKICAgICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmFuaW9fZm9ybWFjaW9uIgogICAgICAgICAgICAgIGxhYmVsPSJBw7FvIGRlIGZvcm1hY2lvbiIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICA8IS0tSWRlYSBOZWdvZ2lvLS0+CiAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSIyIj4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaWRlYV9uZWdvY2lvIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iSWRlYSBkZSBuZWdvY2lvPyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJibGFjayI+PC92LWRpdmlkZXI+CiAgICAgICAgICA8dGhlYWQgc3R5bGU9ImZvbnQtc2l6ZToyNXB4IiBjb2xvcj0iIyMyMDIwMmYiPklWLkV4cGVyaWVuY2lhIExhYm9yYWw8L3RoZWFkPgogICAgICAgIDx2LWRpdmlkZXIgY2xhc3M9ImJsYWNrIj48L3YtZGl2aWRlcj4KICAgICAgPCEtLXYtcm93IHBhcnRlIDQtLT4KICAgICAgICA8di1yb3c+CiAgICAgICAgICA8IS0tRXhwZXJpZW5jaWEgbGFib3JhbC0tPgogICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXgiIGNvbHM9IjEyIiBtZD0iNCI+CiAgICAgICAgICA8di1zZWxlY3QKICAgICAgICAgIAogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmV4cGVyZWNpYV9sYWJvcmFsIgogICAgICAgICAgICA6aXRlbXM9Inllc25vIgogICAgICAgICAgICBsYWJlbD0iUG9zZWUgZXhwZXJpZW5jaWEgbGFib3JhbD8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8IS0tcGVyaW9kbyBlbXBsZW8tLT4KICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjQiIGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICAgIG1heGxlbmd0aD0iMTAwIgogICAgICAgICAgICAgIDpkaXNhYmxlZD0iZm9ybXVsYXJpby5leHBlcmVjaWFfbGFib3JhbD09PSdObyciCiAgICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby51bHRpbW9fcGVyaW9kb190cmFiYWpvIgogICAgICAgICAgICAgIGxhYmVsPSJQZXJpb2RvIGRlIMO6bHRpbW8gZW1wbGVvIgogICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICA8di10b29sdGlwIGJvdHRvbSA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iID4KICAgICAgICAgICAgICAgIDx2LWljb24KICAgICAgICAgICAgICAgICAgc3R5bGU9Im1hcmdpbi1sZWZ0OjIwcHg7IgogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgaW5mbwogICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8c3Bhbj5VbiBlamVtcGxvIGRlIDxzdHJvbmc+UGVyaW9kbyBkZSBlbXBsZW88L3N0cm9uZz4gcHVlZGUgc2VyOiA8c3Ryb25nPkVuZXJvIGRlIDIwMTcgaGFzdGEgQWdvc3RvIGRlIDIwMjA8L3N0cm9uZz48L3NwYW4+CiAgICAgICAgICAgICAgPC92LXRvb2x0aXA+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPCEtLWNhcmdvLS0+CiAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSI0Ij4KICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICBjb3VudGVyCiAgICAgICAgICAgIG1heGxlbmd0aD0iMjAwIgogICAgICAgICAgICA6ZGlzYWJsZWQ9ImZvcm11bGFyaW8uZXhwZXJlY2lhX2xhYm9yYWw9PT0nTm8nIgogICAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uY2FyZ29fZGVzZW1wZW5hZG8iCiAgICAgICAgICAgICAgbGFiZWw9IkNhcmdvIGRlc2VtcGXDsWFkbyIKICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICA8IS0taGFiaWxpZGFkZXMtLT4KICAgICAgICAgIDx2LWNvbCBjb2xzPSIxMiIgbWQ9IjEyIj4KICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgIGNvdW50ZXIKICAgICAgICAgICAgbWF4bGVuZ3RoPSIyNTAiCiAgICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8uaGFiaWxpZGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgbmFtZT0idHhhSGFiaWxpZGFkZXMiCiAgICAgICAgICAgIGxhYmVsPSJIYWJpbGlkYWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMgcGVyc29uYWxlcyBlbiBxdWUgc2UgZGVzdGFjYSBvIGhhY2UgYmllbiIKICAgICAgICAgICAgdmFsdWU9IiIKICAgICAgICAgICAgaGludD0iRXNjcmliYSBzdXMgaGFiaWxpZGFkZXMsIGNhcmFjdGVyaXN0aWNhcyBvIGFjdGl2aWRhZGVzIgogICAgICAgICAgPjwvdi10ZXh0YXJlYT4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgPCEtLWRpZmljdWx0YWRlcy0tPgogICAgICAgICAgPHYtY29sIGNvbHM9IjEyIiBtZD0iMTIiPgogICAgICAgICAgPHYtdGV4dGFyZWEKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5kaWZpY3VsdGFkZXNfcGVyc29uYWxlcyIKICAgICAgICAgICAgbmFtZT0idHhhRGlmaWN1bHRhZGVzIgogICAgICAgICAgICBsYWJlbD0iRGlmaWN1bHRhZGVzLCBjYXJhY3RlcmlzdGljYXMgbyBhY3RpdmlkYWRlcyBwZXJzb25hbCBxdWUgZGViZSBtZWpvcmFyIG8gYXByZW5kZXIiCiAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIGRpZmljdWx0YWRlcywgY2FyYWN0ZXJpc3RpY2FzIG8gYWN0aXZpZGFkZXMiCiAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgPC92LWNvbD4KICAgICAKICAgICAgICAgICA8IS0tZGlzcG9uYWJpbGlkYWQgZW1wbGVvLS0+CiAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCIgY29scz0iMTIiIG1kPSI2Ij4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgIAogICAgICAgICAgICB2LW1vZGVsPSJmb3JtdWxhcmlvLmRpc3BvbmliaWxpZGFkX2hvcmFyaWEiCiAgICAgICAgICAgIDppdGVtcz0idGltZSIKICAgICAgICAgICAgbGFiZWw9IkRpc3BvbmliaWxpZGFkIGhvcmFyaWEgcGFyYSBlbXBsZW8iCiAgICAgICAgICA+PC92LXNlbGVjdD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgPCEtLWRpc3BvbmFiaWxpZGFkIGVtcGxlby0tPiAKICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IiBjb2xzPSIxMiIgbWQ9IjYiPgogICAgICAgICAgICA8IS0tVHJhc2xhZG8tLT4KICAgICAgICAgIDx2LXNlbGVjdAogICAgICAgICAgIHYtbW9kZWw9ImZvcm11bGFyaW8udHJhc2xhZG9fZnVlcmEiCiAgICAgICAgICAgIDppdGVtcz0ieWVzbm8iCiAgICAgICAgICAgIGxhYmVsPSJEaXNwb25pYmlsaWRhZCBwYXJhIHRyYXNsYWRhcnNlIGZ1ZXJhIGRlIENoYWxhdGVuYW5nbyIKICAgICAgICAgID48L3Ytc2VsZWN0PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwhLS1vdHJhcyBvYnNlcnZhY2lvbmVzLS0+CiAgICAgICAgICA8di1jb2wgY29scz0iMTIiIG1kPSIxMiI+CiAgICAgICAgICA8di10ZXh0YXJlYSAKICAgICAgICAgICAgY291bnRlcgogICAgICAgICAgICBtYXhsZW5ndGg9IjI1MCIKICAgICAgICAgICAgdi1tb2RlbD0iZm9ybXVsYXJpby5vdHJhX29ic2VydmFjaW9uIgogICAgICAgICAgICBuYW1lPSJ0eGFPdHJhcyIKICAgICAgICAgICAgbGFiZWw9Ik90cmFzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICAgIHZhbHVlPSIiCiAgICAgICAgICAgIGhpbnQ9IkVzY3JpYmEgc3VzIG9ic2VydmFjaW9uZXMiCiAgICAgICAgICA+PC92LXRleHRhcmVhPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LWFsZXJ0CiAgICAgICAgY2xhc3M9InBpZV9pbmZvIgogICAgICAgICAgZGVuc2UKICAgICAgICAgIHR5cGU9ImVycm9yIgogICAgICAgICAgPgogICAgICAgICBBbnRlcyBkZSBlbnZpYXIgdHUgPHN0cm9uZz5pbmZvcm1hY2nDs248L3N0cm9uZz4gcmV2aXNhIHF1ZSB0b2RvIGVzdGUgY29ycmVjdG8KICAgICAgICA8L3YtYWxlcnQ+CiAgICAgICAgCiAgICA8L3YtY29udGFpbmVyPgogICAgPHYtZGl2aWRlciBjbGFzcz0iYmxhY2siPjwvdi1kaXZpZGVyPgogICAgPHRlbXBsYXRlPgogICAgPHYtYnRuIGJsb2NrIGNvbG9yPSJzdWNjZXNzIiBkYXJrICAKICAgICAgIHYtc2hvdz0iYXJyYXlBc3BpcmFudGUuZm9ybXVsYXJpb19wZXJmaWw9PT0nTm8nIgogICAgICBlbGV2YXRpb249IjgiCiAgICAgIEBjbGljaz0ic2F2ZUZvcm0oKSIKICAgID5FbnZpYXIgbWkgaW5mb3JtYWNpw7NuPC92LWJ0bj4KICAgIDwvdGVtcGxhdGU+CiAgPC92LWZvcm0+CjwvZGl2Pgo="},null]}